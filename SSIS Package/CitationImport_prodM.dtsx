<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="4/7/2014 8:46:16 AM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="CKLAP806"
  DTS:CreatorName="CLERKS\tmudawi"
  DTS:DTSID="{8A4B737E-57CB-463F-9578-3B0FB32916CC}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="15.0.2000.166"
  DTS:LocaleID="1033"
  DTS:ObjectName="CitationImport_prodM 1"
  DTS:PackageType="5"
  DTS:ProtectionLevel="0"
  DTS:VersionBuild="1676"
  DTS:VersionGUID="{2EF3149C-F3D3-4ECA-B8A2-37F9ECB340A2}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[ADO.NETConnectionManager]"
      DTS:CreationName="ADO.NET:System.Data.SqlClient.SqlConnection, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
      DTS:DTSID="{FB762E2B-8FD1-462C-B7BD-54C7676C6C3A}"
      DTS:ObjectName="ADO.NETConnectionManager">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=lsnodyprod\florangeprod;Initial Catalog=OdyClerkInternal;Integrated Security=True;Connect Timeout=0;Application Name=SSIS-CitationsPackage-{FB762E2B-8FD1-462C-B7BD-54C7676C6C3A}CWTMSQL01\FLORANGEDEV.OdyClerkInternal1;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[cwtmsql01\florangedev.OdyClerkInternal]"
      DTS:CreationName="OLEDB"
      DTS:DTSID="{B0DF3741-D13D-47EE-9009-945144E84C3D}"
      DTS:ObjectName="cwtmsql01\florangedev.OdyClerkInternal">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectRetryCount="1"
          DTS:ConnectRetryInterval="5"
          DTS:ConnectionString="Data Source=CWPMSQL01\FlorangeProd;Initial Catalog=OdyClerkInternal;Provider=SQLNCLI11.1;Integrated Security=SSPI;Auto Translate=False;Application Name=SSIS-CitationsPackage-{B0DF3741-D13D-47EE-9009-945144E84C3D}cwtmsql01\florangedev.OdyClerkInternal;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[FTPConnManager]"
      DTS:CreationName="FTP"
      DTS:DelayValidation="True"
      DTS:DTSID="{F3624E5C-4D7E-4ED5-968B-F9030023C157}"
      DTS:ObjectName="FTPConnManager">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString=":21">
          <DTS:FtpConnection
            DTS:ServerName=""
            DTS:UsePassiveMode="True">
            <DTS:Property
              DTS:Name="ServerPassword"
              Sensitive="1"></DTS:Property>
          </DTS:FtpConnection>
        </DTS:ConnectionManager>
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[SMTP Connection Manager 1]"
      DTS:CreationName="SMTP"
      DTS:DTSID="{A4A532D0-551E-45DA-B7A7-AC1A6DFC1C19}"
      DTS:ObjectName="SMTP Connection Manager 1">
      <DTS:ObjectData>
        <SmtpConnectionManager
          ConnectionString="SmtpServer=mailrelay.MYORANGECLERK.NET ;UseWindowsAuthentication=True;EnableSsl=False;"
          ConnectByProxy="False" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{4F7AB78F-D3DF-45B3-8CAB-8C2BE7B2C1AF}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="VarAgencyName">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{63B138C6-C8B3-4BFB-A211-713BD54BB46C}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="VarCommandText">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{2CB776BD-5E1D-4BDA-B2DE-B91B0A66474D}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="VarConnType">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{5317A848-0F5E-4B01-AAAD-52BDD45C73CB}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="VarDataFile">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{14B63866-AFFC-465B-85E1-2A1F9FFA3759}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="VarLocalPath">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{EBE40CEE-A910-4FD9-9280-DD417246FED8}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="VarQueryResult">
      <DTS:VariableValue
        DTS:DataSubType="ManagedSerializable"
        DTS:DataType="13">
        <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <xsd:anyType
              id="ref-1"></xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{9DBE25E8-7EDF-43E9-8B31-079217D9F8A8}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[User::VarRemotePath]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="VarRemotePath">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{FE9BA67B-B802-4235-9127-18F5E59E0E71}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="VarServerName">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{7EAFBA78-1AE1-43C9-8011-8B4077A1B82F}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="VarServerPassword">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{488AE024-0E8F-46DD-8A55-FEEDC695245B}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="VarServerPort">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{FEBA20F7-0331-4C5E-B574-20E159CE138D}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="VarServerUserName">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{BAA2C417-0EFC-4DBD-8253-C6F239364FD0}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="VarSSHKey">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{82B14934-0827-4221-B4B0-59381B077262}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="VarVendorAgencyID">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{C1474C73-B952-49BA-9F6E-A19411A7E1F8}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="VarZipFile">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Delete Old Files Downloaded From SFTP Server"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{D4FF3CED-79BF-4300-958F-FCC500822B47}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:ForceExecutionResult="0"
      DTS:LocaleID="-1"
      DTS:ObjectName="Delete Old Files Downloaded From SFTP Server"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:EventHandlers>
        <DTS:EventHandler
          DTS:refId="Package\Delete Old Files Downloaded From SFTP Server.EventHandlers[OnError]"
          DTS:CreationName="OnError"
          DTS:DTSID="{A9293063-4090-4811-8EE3-C515ED98879B}"
          DTS:EventID="0"
          DTS:EventName="OnError"
          DTS:LocaleID="-1">
          <DTS:Variables>
            <DTS:Variable
              DTS:CreationName=""
              DTS:Description="The propagate property of the event"
              DTS:DTSID="{23B595FB-5D9B-46E0-B0FB-F0A1D62679C9}"
              DTS:IncludeInDebugDump="6789"
              DTS:Namespace="System"
              DTS:ObjectName="Propagate">
              <DTS:VariableValue
                DTS:DataType="11">-1</DTS:VariableValue>
            </DTS:Variable>
            <DTS:Variable
              DTS:CreationName=""
              DTS:DTSID="{15900842-34CF-40E7-BD3C-F2DA996B6B07}"
              DTS:IncludeInDebugDump="6789"
              DTS:Namespace="User"
              DTS:ObjectName="Propagate">
              <DTS:VariableValue
                DTS:DataType="11">0</DTS:VariableValue>
            </DTS:Variable>
          </DTS:Variables>
          <DTS:Executables />
        </DTS:EventHandler>
      </DTS:EventHandlers>
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_947799ece6064c9983eaf572f8a03eaa"
          VSTAMajorVersion="15"
          VSTAMinorVersion="0"
          Language="CSharp">
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_947799ece6064c9983eaf572f8a03eaa.csproj.Properties.Settings.get_Default():ST_947799ece6064c9983eaf572f8a03eaa.csproj.Properties.Sett" +
    "ings")]

namespace ST_947799ece6064c9983eaf572f8a03eaa.csproj.Properties
{


    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase
    {

        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();

        public static Settings Default
        {
            get
            {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[/*
   Microsoft SQL Server Integration Services Script Task
   Write scripts using Microsoft Visual C# 2008.
   The ScriptMain is the entry point class of the script.
*/

using System;
using System.Collections.Generic;
//using System.Linq;
using System.Windows.Forms;
using System.Data;
using System.Net;
using System.Data.SqlClient;
using System.IO;
using Renci.SshNet;
using Renci.SshNet.Sftp;
using System.Threading;
using Microsoft.SqlServer.Dts.Runtime;

namespace ST_947799ece6064c9983eaf572f8a03eaa.csproj
{
    [Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {

        #region VSTA generated code
        enum ScriptResults
        {
            Success = DTSExecResult.Success,
            Failure = DTSExecResult.Failure
        };
        #endregion

        /*
		The execution engine calls this method when the task executes.
		To access the object model, use the Dts property. Connections, variables, events,
		and logging features are available as members of the Dts property as shown in the following examples.

		To reference a variable, call Dts.Variables["MyCaseSensitiveVariableName"].Value;
		To post a log entry, call Dts.Log("This is my log text", 999, null);
		To fire an event, call Dts.Events.FireInformation(99, "test", "hit the help message", "", 0, true);

		To use the connections collection use something like the following:
		ConnectionManager cm = Dts.Connections.Add("OLEDB");
		cm.ConnectionString = "Data Source=localhost;Initial Catalog=AdventureWorks;Provider=SQLNCLI10;Integrated Security=SSPI;Auto Translate=False;";

		Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
		
		To open Help, press F1.
	*/

        public void Main()
        {
            DeleteOldFiles();

            // TODO: Add your code here
            Dts.TaskResult = (int)ScriptResults.Success;
        }

        public void DeleteOldFiles()
        {
            SqlConnection conn = (SqlConnection)Dts.Connections["ADO.NETConnectionManager"].AcquireConnection(null);

            string AgencyName, LocalPath, RemotePath, VendorAgencyID;

            using (SqlDataAdapter dataAdapter = new SqlDataAdapter("Select AgencyName, LocalPath, RemotePath, VendorAgencyID From TrafficCitation_AgencyVendorInfo with (nolock) Where Active =1", conn))
            {
                DataSet dataSet = new DataSet();
                dataAdapter.Fill(dataSet);
                DataTable dataTable = dataSet.Tables["TrafficCitation_AgencyVendorInfo"];

                foreach (DataRow row in dataSet.Tables[0].Rows)
                {
                    AgencyName = row["AgencyName"].ToString();
                    LocalPath = row["LocalPath"].ToString();
                    RemotePath = row["RemotePath"].ToString();
                    VendorAgencyID = row["VendorAgencyID"].ToString();

                    string[] AllFiles = Directory.GetFiles(LocalPath);

                    //Remove old Files to Processed folder then delete them from current folder
                    foreach (string Filename in AllFiles)
                    {
                        string FileExtension = Path.GetExtension(Filename);
                        string FileWithExtention = Path.GetFileName(Filename);

                        string Name = Path.GetFileNameWithoutExtension(Filename);

                        // This is to avoid missing the files in case the package fails right after downloading the files and before 
                        // moving them to the Processed folder T.M. 3-7-2016
                        /////////////////////////////////////////////////////////////////////////
                        if (File.Exists(LocalPath + "\\Processed\\" + FileWithExtention))
                        {
                            if (FileExtension == ".pdf" || FileExtension == ".PDF")
                            {
                                File.Delete(Filename);
                            }
                            else if (FileExtension == ".ZIP" || FileExtension == ".zip")
                            {
                                File.Delete(Filename);
                            }
                            else if (Name.Substring(Name.Length - 3) == "cit")
                            {
                                File.Delete(Filename);
                            }
                            else if (Name.Substring(Name.Length - 3) == "dat")
                            {
                                File.Delete(Filename);
                            }
                            else
                            { }
                        }
                        ////////////////////////////////////////////////////////////////////////
                        else
                        {
                        }
                    }
                }
            }
             conn.Close();
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="st_947799ece6064c9983eaf572f8a03eaa.csproj"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="utf-16"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- This section defines project-level properties.

       Configuration - Specifies whether the default configuration is Release or Debug.
       Platform - Specifies what CPU the output of this project can run on.
       OutputType - Must be "Library" for VSTA.
       NoStandardLibraries - Set to "false" for VSTA.
       RootNamespace - In C#, this specifies the namespace given to new files.
                       In Visual Basic, all objects are wrapped in this namespace at runtime.
       AssemblyName - Name of the output assembly.
  -->
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <OutputType>Library</OutputType>
    <NoStandardLibraries>false</NoStandardLibraries>
    <RootNamespace>ST_947799ece6064c9983eaf572f8a03eaa.csproj</RootNamespace>
    <AssemblyName>ST_947799ece6064c9983eaf572f8a03eaa.csproj</AssemblyName>
    <ProjectGuid>{512B7A0B-EB8B-4354-894E-8ADA6FA70FC9}</ProjectGuid>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <TargetFrameworkProfile>
    </TargetFrameworkProfile>
  </PropertyGroup>
  <!-- This section defines properties that are set when the "Debug" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  -->
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <!-- This section defines properties that are set when the "Release" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  -->
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <!-- This section enables pre- and post-build steps. However,
       it is recommended that MSBuild tasks be used instead of these properties.
  -->
  <PropertyGroup>
    <PreBuildEvent>
    </PreBuildEvent>
    <PostBuildEvent>
    </PostBuildEvent>
  </PropertyGroup>
  <!-- This sections specifies references for the project. -->
  <ItemGroup>
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\IDE\PublicAssemblies\SSIS\140\Microsoft.SqlServer.ManagedDTS.dll</HintPath>
    </Reference>
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\IDE\PublicAssemblies\SSIS\140\Microsoft.SqlServer.ScriptTask.dll</HintPath>
    </Reference>
    <Reference Include="Renci.SshNet">
      <HintPath>C:\develop\Renci.SshNet.dll</HintPath>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
  </ItemGroup>
  <!-- This section defines the user source files that are part of the
       project.

       Compile - Specifies a source file to compile.
       EmbeddedResource - Specifies a .resx file for embedded resources.
       None - Specifies a file that is not to be passed to the compiler (for instance,
              a text file or XML file).
       AppDesigner - Specifies the directory where the application properties files can
                     be found.
  -->
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
    <!-- Include the default configuration information and metadata files for the add-in.
         These files are copied to the build output directory when the project is
         built, and the path to the configuration file is passed to add-in on the command
         line when debugging.
    -->
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="SSIS_ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST150</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>st_947799ece6064c9983eaf572f8a03eaa</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>st_947799ece6064c9983eaf572f8a03eaa</msb:DisplayName>
    <msb:ProjectId>{572FE889-3FB0-4610-9D1B-9AC85F1758E3}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="st_947799ece6064c9983eaf572f8a03eaa.csproj" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="ScriptMain.cs" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_947799ece6064c9983eaf572f8a03eaa.csproj")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_947799ece6064c9983eaf572f8a03eaa.csproj")]
[assembly: AssemblyCopyright("Copyright @  2014")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_947799ece6064c9983eaf572f8a03eaa.csproj.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_947799ece6064c9983eaf572f8a03eaa.csproj.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_947799ece6064c9983eaf572f8a03eaa.csproj.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_947799ece6064c9983eaf572f8a03eaa.csproj.Properties
{


    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources
    {

        private static global::System.Resources.ResourceManager resourceMan;

        private static global::System.Globalization.CultureInfo resourceCulture;

        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources()
        {
        }

        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager
        {
            get
            {
                if ((resourceMan == null))
                {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_947799ece6064c9983eaf572f8a03eaa.csproj.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }

        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture
        {
            get
            {
                return resourceCulture;
            }
            set
            {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_947799ece6064c9983eaf572f8a03eaa.csproj.dll">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
7ABWgKUG7wBWgNAA7wBQIAAAAACGAEsEBgABAGQgAAAAAIYAYQYGAAEAfCIAAAAAhhh2BQYAAQCE
IgAAAACDGHYFBgABAIwiAAAAAJMIJwXzAAEAuCIAAAAAkwjYAPgAAQC/IgAAAACTCOQA/QABAMci
AAAAAJYI6QYDAQIAziIAAAAAhhh2BQYAAgDWIgAAAACRGHwFCAECAAAAAQASAwkAdgUBABEAdgUG
ABkAdgUKACkAdgUQADEAdgUQADkAdgUQAEEAdgUQAEkAdgUQAFEAdgUQAFkAdgUQAGEAdgUQAGkA
dgUGAKkAdgUGANEAdgUVAOEAdgUGAHEArQYbAOkA9QYBAOkAlQY1APEAJAQ6APkA6ARAAIEAdgVF
AIkAdgUGAAEBHwRMAIkAVgZSAAkBJARYAAkBJARfABEBygZmACEBaAVsAJEAGgdxACkBJAR1ALEA
MgN6ADEBcAZ+ADkBUASEADkBnwCEADkBXQSEAEEB0waJAEkBwwaQAEEBTgeVAEkBcgGbAEEBSgOg
AEEBOwOkAJEAJgepAJkAVQEGAFEBTwEGAHEAdgUGALEAdgUGAFkBiACtAFkBNwe2ALkAdgW8ANkA
dgUGAAgAFADWAAgAGADbACkAcwBDAS4ACwAbAS4AEwAkAS4AGwBDAS4AIwBMAS4AKwB8AS4AMwB8
AS4AOwB8AS4AQwBMAS4ASwCCAS4AUwB8AS4AWwCZAUMAYwDbAEkAcwBDAWEAewDbAGMAawDbACAA
AwABAAQAAwAAACsFDAEAAPgAEQEAAO0GFgECAAUAAwACAAYABQABAAcABQACAAgABwAEgAAAAQAA
AH0f8U8AAAAAAABVAwAABAAAAAAAAAAAAAAAxABHAAAAAAAOAAAAAAAAAAAAAADNAIADAAAAAAQA
AAAAAAAAAAAAAMQAOwAAAAAABAAAAAAAAAAAAAAAxAAtBAAAAAAOAAAAAAAAAAAAAADNABQAAAAA
AAAAAAABAAAAxwUAAAUAAgAAAAA8TW9kdWxlPgBTeXN0ZW0uSU8ATWljcm9zb2Z0LlNxbFNlcnZl
ci5NYW5hZ2VkRFRTAHZhbHVlX18AU3lzdGVtLkRhdGEAbXNjb3JsaWIAZGVmYXVsdEluc3RhbmNl
AERhdGFUYWJsZQBJRGlzcG9zYWJsZQBSdW50aW1lVHlwZUhhbmRsZQBHZXRUeXBlRnJvbUhhbmRs
ZQBGaWxlAEdldEZpbGVOYW1lAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlJ1bnRpbWUAVHlwZQBG
YWlsdXJlAGdldF9DdWx0dXJlAHNldF9DdWx0dXJlAHJlc291cmNlQ3VsdHVyZQBWU1RBUlRTY3Jp
cHRPYmplY3RNb2RlbEJhc2UASW50ZXJuYWxEYXRhQ29sbGVjdGlvbkJhc2UAQXBwbGljYXRpb25T
ZXR0aW5nc0Jhc2UAQ2xvc2UARGlzcG9zZQBFZGl0b3JCcm93c2FibGVTdGF0ZQBEZWxldGUAQ29t
cGlsZXJHZW5lcmF0ZWRBdHRyaWJ1dGUARGVidWdnZXJOb25Vc2VyQ29kZUF0dHJpYnV0ZQBEZWJ1
Z2dhYmxlQXR0cmlidXRlAEVkaXRvckJyb3dzYWJsZUF0dHJpYnV0ZQBBc3NlbWJseVRpdGxlQXR0
cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0cmlidXRlAFRhcmdldEZyYW1ld29ya0F0dHJpYnV0
ZQBBc3NlbWJseUNvbmZpZ3VyYXRpb25BdHRyaWJ1dGUAQXNzZW1ibHlEZXNjcmlwdGlvbkF0dHJp
YnV0ZQBDb21waWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRlAEFzc2VtYmx5UHJvZHVjdEF0dHJp
YnV0ZQBBc3NlbWJseUNvcHlyaWdodEF0dHJpYnV0ZQBTU0lTU2NyaXB0VGFza0VudHJ5UG9pbnRB
dHRyaWJ1dGUAQXNzZW1ibHlDb21wYW55QXR0cmlidXRlAFJ1bnRpbWVDb21wYXRpYmlsaXR5QXR0
cmlidXRlAHZhbHVlAFN5c3RlbS5SdW50aW1lLlZlcnNpb25pbmcAVG9TdHJpbmcAU3Vic3RyaW5n
AFBhdGgAZ2V0X0xlbmd0aABTVF85NDc3OTllY2U2MDY0Yzk5ODNlYWY1NzJmOGEwM2VhYS5jc3By
b2oATWljcm9zb2Z0LlNxbFNlcnZlci5TY3JpcHRUYXNrAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRz
LlRhc2tzLlNjcmlwdFRhc2sAU2NyaXB0T2JqZWN0TW9kZWwAU3lzdGVtLkNvbXBvbmVudE1vZGVs
AFNUXzk0Nzc5OWVjZTYwNjRjOTk4M2VhZjU3MmY4YTAzZWFhLmNzcHJvai5kbGwARmlsbABnZXRf
SXRlbQBTeXN0ZW0ARW51bQByZXNvdXJjZU1hbgBTY3JpcHRNYWluAEdldEV4dGVuc2lvbgBHZXRG
aWxlTmFtZVdpdGhvdXRFeHRlbnNpb24AU3lzdGVtLkNvbmZpZ3VyYXRpb24AU3lzdGVtLkdsb2Jh
bGl6YXRpb24AU3lzdGVtLlJlZmxlY3Rpb24ARGF0YVRhYmxlQ29sbGVjdGlvbgBEYXRhUm93Q29s
bGVjdGlvbgBEYkNvbm5lY3Rpb24AQWNxdWlyZUNvbm5lY3Rpb24AU3FsQ29ubmVjdGlvbgBTeXN0
ZW0uRGF0YS5Db21tb24AQ3VsdHVyZUluZm8AZ2V0X1Jlc291cmNlTWFuYWdlcgBDb25uZWN0aW9u
TWFuYWdlcgBTcWxEYXRhQWRhcHRlcgBJRW51bWVyYXRvcgBHZXRFbnVtZXJhdG9yAC5jdG9yAC5j
Y3RvcgBTeXN0ZW0uRGlhZ25vc3RpY3MAU3lzdGVtLlJ1bnRpbWUuQ29tcGlsZXJTZXJ2aWNlcwBT
eXN0ZW0uUmVzb3VyY2VzAFNUXzk0Nzc5OWVjZTYwNjRjOTk4M2VhZjU3MmY4YTAzZWFhLmNzcHJv
ai5Qcm9wZXJ0aWVzLlJlc291cmNlcy5yZXNvdXJjZXMARGVidWdnaW5nTW9kZXMAU1RfOTQ3Nzk5
ZWNlNjA2NGM5OTgzZWFmNTcyZjhhMDNlYWEuY3Nwcm9qLlByb3BlcnRpZXMAZ2V0X1RhYmxlcwBE
ZWxldGVPbGRGaWxlcwBHZXRGaWxlcwBTZXR0aW5ncwBTeXN0ZW0uQ29sbGVjdGlvbnMAZ2V0X0Nv
bm5lY3Rpb25zAFN1Y2Nlc3MAZ2V0X0R0cwBTY3JpcHRSZXN1bHRzAEV4aXN0cwBnZXRfUm93cwBD
b25jYXQAT2JqZWN0AERhdGFTZXQAZ2V0X0RlZmF1bHQAc2V0X1Rhc2tSZXN1bHQAU3lzdGVtLkRh
dGEuU3FsQ2xpZW50AGdldF9DdXJyZW50AE1vdmVOZXh0AERhdGFSb3cAZ2V0X0Fzc2VtYmx5AERp
cmVjdG9yeQBvcF9FcXVhbGl0eQAAAAAxQQBEAE8ALgBOAEUAVABDAG8AbgBuAGUAYwB0AGkAbwBu
AE0AYQBuAGEAZwBlAHIAAID5UwBlAGwAZQBjAHQAIABBAGcAZQBuAGMAeQBOAGEAbQBlACwAIABM
AG8AYwBhAGwAUABhAHQAaAAsACAAUgBlAG0AbwB0AGUAUABhAHQAaAAsACAAVgBlAG4AZABvAHIA
QQBnAGUAbgBjAHkASQBEACAARgByAG8AbQAgAFQAcgBhAGYAZgBpAGMAQwBpAHQAYQB0AGkAbwBu
AF8AQQBnAGUAbgBjAHkAVgBlAG4AZABvAHIASQBuAGYAbwAgAHcAaQB0AGgAIAAoAG4AbwBsAG8A
YwBrACkAIABXAGgAZQByAGUAIABBAGMAdABpAHYAZQAgAD0AMQAAQVQAcgBhAGYAZgBpAGMAQwBp
AHQAYQB0AGkAbwBuAF8AQQBnAGUAbgBjAHkAVgBlAG4AZABvAHIASQBuAGYAbwAAFUEAZwBlAG4A
YwB5AE4AYQBtAGUAABNMAG8AYwBhAGwAUABhAHQAaAAAFVIAZQBtAG8AdABlAFAAYQB0AGgAAB1W
AGUAbgBkAG8AcgBBAGcAZQBuAGMAeQBJAEQAABdcAFAAcgBvAGMAZQBzAHMAZQBkAFwAAAkuAHAA
ZABmAAAJLgBQAEQARgAACS4AWgBJAFAAAAkuAHoAaQBwAAAHYwBpAHQAAAdkAGEAdAAAf1MAVABf
ADkANAA3ADcAOQA5AGUAYwBlADYAMAA2ADQAYwA5ADkAOAAzAGUAYQBmADUANwAyAGYAOABhADAA
MwBlAGEAYQAuAGMAcwBwAHIAbwBqAC4AUAByAG8AcABlAHIAdABpAGUAcwAuAFIAZQBzAG8AdQBy
AGMAZQBzAAAAADaotECIwLFAixCvCBl5ii0ABCABAQgDIAABBSABARERBCABAQ4FIAEBEWUEIAAS
dRQHDBI9DhJBEkUSSR0OCA4ODg4STQQgABJ5BSABEn0cBCABHBwGIAIBDhI9BSABCBJFBSAAEoCF
BiABEoCJDgYgARKAiQgFIAASgI0EIAASSQMgABwEIAEcDgMgAA4FAAEdDg4EAAEODgYAAw4ODg4E
AAECDgUAAgIODgQAAQEOAyAACAQgAQ4IAyAAAggAARKArRGAsQUgABKAtQcgAgEOEoC1CLd6XFYZ
NOCJCImEXc2AgMyRBAAAAAAEAQAAAAMGEl0DBhJhAwYSEAIGCAMGERQEAAASXQQAABJhBQABARJh
BAAAEhADAAABBAgAEl0ECAASYQQIABIQCAEACAAAAAAAHgEAAQBUAhZXcmFwTm9uRXhjZXB0aW9u
VGhyb3dzAQgBAAIAAAAAAC8BACpTVF85NDc3OTllY2U2MDY0Yzk5ODNlYWY1NzJmOGEwM2VhYS5j
c3Byb2oAAAUBAAAAABYBABFDb3B5cmlnaHQgQCAgMjAxNAAASQEAGi5ORVRGcmFtZXdvcmssVmVy
c2lvbj12NC41AQBUDhRGcmFtZXdvcmtEaXNwbGF5TmFtZRIuTkVUIEZyYW1ld29yayA0LjUAtAAA
AM7K774BAAAAkQAAAGxTeXN0ZW0uUmVzb3VyY2VzLlJlc291cmNlUmVhZGVyLCBtc2NvcmxpYiwg
VmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2
MTkzNGUwODkjU3lzdGVtLlJlc291cmNlcy5SdW50aW1lUmVzb3VyY2VTZXQCAAAAAAAAAAAAAABQ
QURQQURQtAAAAOg0AAAAAAAAAAAAAAI1AAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD0NAAAAAAA
AAAAAAAAAF9Db3JEbGxNYWluAG1zY29yZWUuZGxsAAAAAAD/JQAgABAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAABABAAAAAYAACAAAAAAAAAAAAAAAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAAAABI
AAAAWEAAAFoEAAAAAAAAAAAAAFoENAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBPAAAA
AAC9BO/+AAABAAAAAQDxT30fAAABAPFPfR8/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAARAAA
AAEAVgBhAHIARgBpAGwAZQBJAG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBvAG4A
AAAAAAAAsAS6AwAAAQBTAHQAcgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAACWAwAAAQAwADAAMAAw
ADAANABiADAAAAAaAAEAAQBDAG8AbQBtAGUAbgB0AHMAAAAAAAAAIgABAAEAQwBvAG0AcABhAG4A
eQBOAGEAbQBlAAAAAAAAAAAAfgArAAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAA
AFMAVABfADkANAA3ADcAOQA5AGUAYwBlADYAMAA2ADQAYwA5ADkAOAAzAGUAYQBmADUANwAyAGYA
OABhADAAMwBlAGEAYQAuAGMAcwBwAHIAbwBqAAAAAAA+AA8AAQBGAGkAbABlAFYAZQByAHMAaQBv
AG4AAAAAADEALgAwAC4AOAAwADYAMQAuADIAMAA0ADYANQAAAAAAfgAvAAEASQBuAHQAZQByAG4A
YQBsAE4AYQBtAGUAAABTAFQAXwA5ADQANwA3ADkAOQBlAGMAZQA2ADAANgA0AGMAOQA5ADgAMwBl
AGEAZgA1ADcAMgBmADgAYQAwADMAZQBhAGEALgBjAHMAcAByAG8AagAuAGQAbABsAAAAAABIABIA
AQBMAGUAZwBhAGwAQwBvAHAAeQByAGkAZwBoAHQAAABDAG8AcAB5AHIAaQBnAGgAdAAgAEAAIAAg
ADIAMAAxADQAAAAqAAEAAQBMAGUAZwBhAGwAVAByAGEAZABlAG0AYQByAGsAcwAAAAAAAAAAAIYA
LwABAE8AcgBpAGcAaQBuAGEAbABGAGkAbABlAG4AYQBtAGUAAABTAFQAXwA5ADQANwA3ADkAOQBl
AGMAZQA2ADAANgA0AGMAOQA5ADgAMwBlAGEAZgA1ADcAMgBmADgAYQAwADMAZQBhAGEALgBjAHMA
cAByAG8AagAuAGQAbABsAAAAAAB2ACsAAQBQAHIAbwBkAHUAYwB0AE4AYQBtAGUAAAAAAFMAVABf
ADkANAA3ADcAOQA5AGUAYwBlADYAMAA2ADQAYwA5ADkAOAAzAGUAYQBmADUANwAyAGYAOABhADAA
MwBlAGEAYQAuAGMAcwBwAHIAbwBqAAAAAABCAA8AAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBv
AG4AAAAxAC4AMAAuADgAMAA2ADEALgAyADAANAA2ADUAAAAAAEYADwABAEEAcwBzAGUAbQBiAGwA
eQAgAFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADgAMAA2ADEALgAyADAANAA2ADUAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAwAAAAUNQAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Execute SQL Task 1"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:DelayValidation="True"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{B810CC51-FF70-4EAB-BDE1-75EBFB6F7DD2}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:FailPackageOnFailure="True"
      DTS:ForceExecutionResult="0"
      DTS:LocaleID="-1"
      DTS:ObjectName="Execute SQL Task 1"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:EventHandlers>
        <DTS:EventHandler
          DTS:refId="Package\Execute SQL Task 1.EventHandlers[OnError]"
          DTS:CreationName="OnError"
          DTS:DTSID="{4D6A977B-02D9-4ECB-B49B-DB6A6455ED04}"
          DTS:EventID="0"
          DTS:EventName="OnError"
          DTS:LocaleID="-1">
          <DTS:Variables>
            <DTS:Variable
              DTS:CreationName=""
              DTS:Description="The propagate property of the event"
              DTS:DTSID="{6B5D5245-926A-467B-B513-9C153E09CCA4}"
              DTS:IncludeInDebugDump="6789"
              DTS:Namespace="System"
              DTS:ObjectName="Propagate">
              <DTS:VariableValue
                DTS:DataType="11">-1</DTS:VariableValue>
            </DTS:Variable>
            <DTS:Variable
              DTS:CreationName=""
              DTS:DTSID="{76A7AC53-3F94-4E12-A2C9-2D03B0473C0F}"
              DTS:IncludeInDebugDump="6789"
              DTS:Namespace="User"
              DTS:ObjectName="Propagate">
              <DTS:VariableValue
                DTS:DataType="11">0</DTS:VariableValue>
            </DTS:Variable>
          </DTS:Variables>
          <DTS:Executables />
        </DTS:EventHandler>
      </DTS:EventHandlers>
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{B0DF3741-D13D-47EE-9009-945144E84C3D}"
          SQLTask:SqlStatementSource="SELECT AgencyName, ConnectionType, ServerName, ServerUserName, ServerPassword, ServerPort, LocalPath, RemotePath, SSHKey&#xA;FROM     dbo.TrafficCitation_AgencyVendorInfo with (nolock)&#xA;WHERE  Active = 1 &#xA;AND AgencyName NOT IN('Winter Garden','Oakland')"
          SQLTask:ResultType="ResultSetType_Rowset" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ResultBinding
            SQLTask:ResultName="0"
            SQLTask:DtsVariableName="User::VarQueryResult" />
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="0"
            SQLTask:DtsVariableName="User::VarAgencyName"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="129"
            SQLTask:ParameterSize="-1" />
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="1"
            SQLTask:DtsVariableName="User::VarConnType"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="129"
            SQLTask:ParameterSize="-1" />
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="2"
            SQLTask:DtsVariableName="User::VarServerName"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="129"
            SQLTask:ParameterSize="-1" />
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="3"
            SQLTask:DtsVariableName="User::VarServerUserName"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="129"
            SQLTask:ParameterSize="-1" />
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="4"
            SQLTask:DtsVariableName="User::VarServerPassword"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="129"
            SQLTask:ParameterSize="-1" />
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="5"
            SQLTask:DtsVariableName="User::VarServerPort"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="2"
            SQLTask:ParameterSize="-1" />
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="6"
            SQLTask:DtsVariableName="User::VarLocalPath"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="129"
            SQLTask:ParameterSize="-1" />
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="7"
            SQLTask:DtsVariableName="User::VarRemotePath"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="129"
            SQLTask:ParameterSize="-1" />
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="8"
            SQLTask:DtsVariableName="User::VarSSHKey"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="129"
            SQLTask:ParameterSize="-1" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Foreach Loop Container 1"
      DTS:CreationName="STOCK:FOREACHLOOP"
      DTS:DelayValidation="True"
      DTS:Description="Foreach Loop Container"
      DTS:DTSID="{A4154BC6-2C2A-426B-AF3B-16DC7E71978D}"
      DTS:ExecutableType="STOCK:FOREACHLOOP"
      DTS:ForceExecutionResult="0"
      DTS:LocaleID="-1"
      DTS:ObjectName="Foreach Loop Container 1">
      <DTS:ForEachEnumerator
        DTS:CreationName="Microsoft.ForEachADOEnumerator"
        DTS:DTSID="{416702E9-CF4C-4146-B9A5-74751DC7FC79}"
        DTS:ObjectName="{174A74E8-015A-4530-89EE-DEF4A41B1D87}">
        <DTS:ObjectData>
          <FEEADO
            EnumType="EnumerateRowsInFirstTable"
            VarName="User::VarQueryResult" />
        </DTS:ObjectData>
      </DTS:ForEachEnumerator>
      <DTS:Variables />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\Foreach Loop Container 1\Script Task"
          DTS:CreationName="Microsoft.ScriptTask"
          DTS:Description="Script Task"
          DTS:DTSID="{2FDBEA2C-BF1D-4D00-BDA9-55F2AD7ED043}"
          DTS:ExecutableType="Microsoft.ScriptTask"
          DTS:ForceExecutionResult="0"
          DTS:LocaleID="-1"
          DTS:ObjectName="Script Task"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:EventHandlers>
            <DTS:EventHandler
              DTS:refId="Package\Foreach Loop Container 1\Script Task.EventHandlers[OnError]"
              DTS:CreationName="OnError"
              DTS:DTSID="{4648E375-A68B-4707-9CC4-305D9FE95FA3}"
              DTS:EventID="0"
              DTS:EventName="OnError"
              DTS:LocaleID="-1">
              <DTS:Variables>
                <DTS:Variable
                  DTS:CreationName=""
                  DTS:Description="The propagate property of the event"
                  DTS:DTSID="{654B80B2-9141-4A65-ADDB-C82739E238D3}"
                  DTS:IncludeInDebugDump="6789"
                  DTS:Namespace="System"
                  DTS:ObjectName="Propagate">
                  <DTS:VariableValue
                    DTS:DataType="11">-1</DTS:VariableValue>
                </DTS:Variable>
                <DTS:Variable
                  DTS:CreationName=""
                  DTS:DTSID="{5F5D9386-0358-4D23-94C9-0ADA7DF6582A}"
                  DTS:IncludeInDebugDump="6789"
                  DTS:Namespace="User"
                  DTS:ObjectName="Propagate">
                  <DTS:VariableValue
                    DTS:DataType="11">0</DTS:VariableValue>
                </DTS:Variable>
              </DTS:Variables>
              <DTS:Executables />
            </DTS:EventHandler>
          </DTS:EventHandlers>
          <DTS:ObjectData>
            <ScriptProject
              Name="ST_92ee9e7e5be248af84d0db265f45b0ae"
              VSTAMajorVersion="15"
              VSTAMinorVersion="0"
              Language="CSharp"
              ReadWriteVariables="User::VarAgencyName,User::VarCommandText,User::VarConnType,User::VarDataFile,User::VarLocalPath,User::VarQueryResult,User::VarRemotePath,User::VarServerName,User::VarServerPassword,User::VarServerPort,User::VarServerUserName,User::VarSSHKey,User::VarVendorAgencyID,User::VarZipFile">
              <ProjectItem
                Name="ScriptMain.cs"
                Encoding="UTF8"><![CDATA[/*
   Microsoft SQL Server Integration Services Script Task
   Write scripts using Microsoft Visual C# 2008.
   The ScriptMain is the entry point class of the script.
*/

using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;

namespace ST_92ee9e7e5be248af84d0db265f45b0ae.csproj
{
    [Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {

        #region VSTA generated code
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

        /*
		The execution engine calls this method when the task executes.
		To access the object model, use the Dts property. Connections, variables, events,
		and logging features are available as members of the Dts property as shown in the following examples.

		To reference a variable, call Dts.Variables["MyCaseSensitiveVariableName"].Value;
		To post a log entry, call Dts.Log("This is my log text", 999, null);
		To fire an event, call Dts.Events.FireInformation(99, "test", "hit the help message", "", 0, true);

		To use the connections collection use something like the following:
		ConnectionManager cm = Dts.Connections.Add("OLEDB");
		cm.ConnectionString = "Data Source=localhost;Initial Catalog=AdventureWorks;Provider=SQLNCLI10;Integrated Security=SSPI;Auto Translate=False;";

		Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
		
		To open Help, press F1.
	*/

        public void Main()
        {
            ConnectionManager ftpConnectionManager;
            ftpConnectionManager = Dts.Connections["FTPConnManager"];
            Dts.Connections["FTPConnManager"].Properties["ServerName"].SetValue(ftpConnectionManager, Dts.Variables["VarServerName"].Value);
            Dts.Connections["FTPConnManager"].Properties["ServerPort"].SetValue(ftpConnectionManager, Dts.Variables["VarServerPort"].Value);
            Dts.Connections["FTPConnManager"].Properties["ServerUserName"].SetValue(ftpConnectionManager, Dts.Variables["VarServerUserName"].Value);
            Dts.Connections["FTPConnManager"].Properties["ServerPassword"].SetValue(ftpConnectionManager, Dts.Variables["VarServerPassword"].Value);
            Dts.TaskResult = (int)ScriptResults.Success;

        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.resx"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_92ee9e7e5be248af84d0db265f45b0ae.csproj.Properties.Settings.get_Default():ST_92ee9e7e5be248af84d0db265f45b0ae.csproj.Properties.Sett" +
    "ings")]

namespace ST_92ee9e7e5be248af84d0db265f45b0ae.csproj.Properties
{


    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase
    {

        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();

        public static Settings Default
        {
            get
            {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="st_92ee9e7e5be248af84d0db265f45b0ae.csproj"
                Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="utf-16"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- This section defines project-level properties.

       Configuration - Specifies whether the default configuration is Release or Debug.
       Platform - Specifies what CPU the output of this project can run on.
       OutputType - Must be "Library" for VSTA.
       NoStandardLibraries - Set to "false" for VSTA.
       RootNamespace - In C#, this specifies the namespace given to new files.
                       In Visual Basic, all objects are wrapped in this namespace at runtime.
       AssemblyName - Name of the output assembly.
  -->
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <OutputType>Library</OutputType>
    <NoStandardLibraries>false</NoStandardLibraries>
    <RootNamespace>ST_92ee9e7e5be248af84d0db265f45b0ae.csproj</RootNamespace>
    <AssemblyName>ST_92ee9e7e5be248af84d0db265f45b0ae.csproj</AssemblyName>
    <ProjectGuid>{7B30CCA1-B7A9-4510-B517-38259F5E9191}</ProjectGuid>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <TargetFrameworkProfile>
    </TargetFrameworkProfile>
  </PropertyGroup>
  <!-- This section defines properties that are set when the "Debug" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  -->
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <!-- This section defines properties that are set when the "Release" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  -->
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <!-- This section enables pre- and post-build steps. However,
       it is recommended that MSBuild tasks be used instead of these properties.
  -->
  <PropertyGroup>
    <PreBuildEvent>
    </PreBuildEvent>
    <PostBuildEvent>
    </PostBuildEvent>
  </PropertyGroup>
  <!-- This sections specifies references for the project. -->
  <ItemGroup>
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\IDE\PublicAssemblies\SSIS\140\Microsoft.SqlServer.ManagedDTS.dll</HintPath>
    </Reference>
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\IDE\PublicAssemblies\SSIS\140\Microsoft.SqlServer.ScriptTask.dll</HintPath>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
  </ItemGroup>
  <!-- This section defines the user source files that are part of the
       project.

       Compile - Specifies a source file to compile.
       EmbeddedResource - Specifies a .resx file for embedded resources.
       None - Specifies a file that is not to be passed to the compiler (for instance,
              a text file or XML file).
       AppDesigner - Specifies the directory where the application properties files can
                     be found.
  -->
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
    <!-- Include the default configuration information and metadata files for the add-in.
         These files are copied to the build output directory when the project is
         built, and the path to the configuration file is passed to add-in on the command
         line when debugging.
    -->
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="SSIS_ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST150</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
              <ProjectItem
                Name="Project"
                Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>st_92ee9e7e5be248af84d0db265f45b0ae</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>st_92ee9e7e5be248af84d0db265f45b0ae</msb:DisplayName>
    <msb:ProjectId>{45A612A7-6746-4746-AD30-652505CF82AC}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="st_92ee9e7e5be248af84d0db265f45b0ae.csproj" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="ScriptMain.cs" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
              <ProjectItem
                Name="Properties\AssemblyInfo.cs"
                Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_92ee9e7e5be248af84d0db265f45b0ae.csproj")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_92ee9e7e5be248af84d0db265f45b0ae.csproj")]
[assembly: AssemblyCopyright("Copyright @  2015")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.settings"
                Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_92ee9e7e5be248af84d0db265f45b0ae.csproj.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_92ee9e7e5be248af84d0db265f45b0ae.csproj.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_92ee9e7e5be248af84d0db265f45b0ae.csproj.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_92ee9e7e5be248af84d0db265f45b0ae.csproj.Properties
{


    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources
    {

        private static global::System.Resources.ResourceManager resourceMan;

        private static global::System.Globalization.CultureInfo resourceCulture;

        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources()
        {
        }

        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager
        {
            get
            {
                if ((resourceMan == null))
                {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_92ee9e7e5be248af84d0db265f45b0ae.csproj.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }

        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture
        {
            get
            {
                return resourceCulture;
            }
            set
            {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
              <BinaryItem
                Name="ST_92ee9e7e5be248af84d0db265f45b0ae.csproj.dll">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
+QBlAFAA+QCpBVgAmQBFBF4AuQBFBAYACAAUAHgACAAYAH0AKQBzAOUALgALAL0ALgATAMYALgAb
AOUALgAjAO4ALgArAB4BLgAzAB4BLgA7AB4BLgBDAO4ALgBLACQBLgBTAB4BLgBbADsBQwBjAH0A
SQBzAOUAYQB7AH0AYwBrAH0AGwADAAEABAADAAAAIwSuAAAAxACzAAAAkgW4AAIABAADAAIABQAF
AAEABgAFAAIABwAHAASAAAABAAAAfR8NUAAAAAAAAOECAAAEAAAAAAAAAAAAAABmADEAAAAAAA4A
AAAAAAAAAAAAAG8ADAMAAAAADgAAAAAAAAAAAAAAbwAKAAAAAAAEAAAAAAAAAAAAAABmALQDAAAA
AAAAAAABAAAAlgQAAAUAAgAAAAA8TW9kdWxlPgBNaWNyb3NvZnQuU3FsU2VydmVyLk1hbmFnZWRE
VFMAdmFsdWVfXwBtc2NvcmxpYgBkZWZhdWx0SW5zdGFuY2UAVmFyaWFibGUAUnVudGltZVR5cGVI
YW5kbGUAR2V0VHlwZUZyb21IYW5kbGUATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuUnVudGltZQBU
eXBlAEZhaWx1cmUAZ2V0X0N1bHR1cmUAc2V0X0N1bHR1cmUAcmVzb3VyY2VDdWx0dXJlAFZTVEFS
VFNjcmlwdE9iamVjdE1vZGVsQmFzZQBBcHBsaWNhdGlvblNldHRpbmdzQmFzZQBFZGl0b3JCcm93
c2FibGVTdGF0ZQBDb21waWxlckdlbmVyYXRlZEF0dHJpYnV0ZQBEZWJ1Z2dlck5vblVzZXJDb2Rl
QXR0cmlidXRlAERlYnVnZ2FibGVBdHRyaWJ1dGUARWRpdG9yQnJvd3NhYmxlQXR0cmlidXRlAEFz
c2VtYmx5VGl0bGVBdHRyaWJ1dGUAQXNzZW1ibHlUcmFkZW1hcmtBdHRyaWJ1dGUAVGFyZ2V0RnJh
bWV3b3JrQXR0cmlidXRlAEFzc2VtYmx5Q29uZmlndXJhdGlvbkF0dHJpYnV0ZQBBc3NlbWJseURl
c2NyaXB0aW9uQXR0cmlidXRlAENvbXBpbGF0aW9uUmVsYXhhdGlvbnNBdHRyaWJ1dGUAQXNzZW1i
bHlQcm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5Q29weXJpZ2h0QXR0cmlidXRlAFNTSVNTY3JpcHRU
YXNrRW50cnlQb2ludEF0dHJpYnV0ZQBBc3NlbWJseUNvbXBhbnlBdHRyaWJ1dGUAUnVudGltZUNv
bXBhdGliaWxpdHlBdHRyaWJ1dGUAZ2V0X1ZhbHVlAFNldFZhbHVlAHZhbHVlAFN5c3RlbS5SdW50
aW1lLlZlcnNpb25pbmcAU1RfOTJlZTllN2U1YmUyNDhhZjg0ZDBkYjI2NWY0NWIwYWUuY3Nwcm9q
AE1pY3Jvc29mdC5TcWxTZXJ2ZXIuU2NyaXB0VGFzawBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5U
YXNrcy5TY3JpcHRUYXNrAFNjcmlwdE9iamVjdE1vZGVsAFN5c3RlbS5Db21wb25lbnRNb2RlbABT
VF85MmVlOWU3ZTViZTI0OGFmODRkMGRiMjY1ZjQ1YjBhZS5jc3Byb2ouZGxsAGdldF9JdGVtAFN5
c3RlbQBFbnVtAHJlc291cmNlTWFuAFNjcmlwdE1haW4AU3lzdGVtLkNvbmZpZ3VyYXRpb24AU3lz
dGVtLkdsb2JhbGl6YXRpb24AU3lzdGVtLlJlZmxlY3Rpb24AQ3VsdHVyZUluZm8AZ2V0X1Jlc291
cmNlTWFuYWdlcgBDb25uZWN0aW9uTWFuYWdlcgAuY3RvcgAuY2N0b3IAU3lzdGVtLkRpYWdub3N0
aWNzAFN5c3RlbS5SdW50aW1lLkNvbXBpbGVyU2VydmljZXMAU3lzdGVtLlJlc291cmNlcwBTVF85
MmVlOWU3ZTViZTI0OGFmODRkMGRiMjY1ZjQ1YjBhZS5jc3Byb2ouUHJvcGVydGllcy5SZXNvdXJj
ZXMucmVzb3VyY2VzAERlYnVnZ2luZ01vZGVzAFNUXzkyZWU5ZTdlNWJlMjQ4YWY4NGQwZGIyNjVm
NDViMGFlLmNzcHJvai5Qcm9wZXJ0aWVzAGdldF9Qcm9wZXJ0aWVzAER0c1Byb3BlcnRpZXMAZ2V0
X1ZhcmlhYmxlcwBTZXR0aW5ncwBnZXRfQ29ubmVjdGlvbnMAU3VjY2VzcwBnZXRfRHRzAFNjcmlw
dFJlc3VsdHMAT2JqZWN0AGdldF9EZWZhdWx0AHNldF9UYXNrUmVzdWx0AGdldF9Bc3NlbWJseQBE
dHNQcm9wZXJ0eQAAAAAdRgBUAFAAQwBvAG4AbgBNAGEAbgBhAGcAZQByAAAVUwBlAHIAdgBlAHIA
TgBhAG0AZQAAG1YAYQByAFMAZQByAHYAZQByAE4AYQBtAGUAABVTAGUAcgB2AGUAcgBQAG8AcgB0
AAAbVgBhAHIAUwBlAHIAdgBlAHIAUABvAHIAdAAAHVMAZQByAHYAZQByAFUAcwBlAHIATgBhAG0A
ZQAAI1YAYQByAFMAZQByAHYAZQByAFUAcwBlAHIATgBhAG0AZQAAHVMAZQByAHYAZQByAFAAYQBz
AHMAdwBvAHIAZAAAI1YAYQByAFMAZQByAHYAZQByAFAAYQBzAHMAdwBvAHIAZAAAf1MAVABfADkA
MgBlAGUAOQBlADcAZQA1AGIAZQAyADQAOABhAGYAOAA0AGQAMABkAGIAMgA2ADUAZgA0ADUAYgAw
AGEAZQAuAGMAcwBwAHIAbwBqAC4AUAByAG8AcABlAHIAdABpAGUAcwAuAFIAZQBzAG8AdQByAGMA
ZQBzAAAA3REd7e8hrkKw0bTCL06udwAEIAEBCAMgAAEFIAEBEREEIAEBDgUgAQERVQQHARI9BCAA
EmUEIAASaQUgARI9HAQgABJtBSABEnEcBCAAEnUFIAESeRwDIAAcBSACARwcBwABEn0RgIEFIAAS
gIUHIAIBDhKAhQi3elxWGTTgiQiJhF3NgIDMkQQAAAAABAEAAAADBhJNAwYSUQMGEhACBggDBhEU
BAAAEk0EAAASUQUAAQESUQQAABIQAwAAAQQIABJNBAgAElEECAASEAgBAAgAAAAAAB4BAAEAVAIW
V3JhcE5vbkV4Y2VwdGlvblRocm93cwEIAQACAAAAAAAvAQAqU1RfOTJlZTllN2U1YmUyNDhhZjg0
ZDBkYjI2NWY0NWIwYWUuY3Nwcm9qAAAFAQAAAAAWAQARQ29weXJpZ2h0IEAgIDIwMTUAAEkBABou
TkVURnJhbWV3b3JrLFZlcnNpb249djQuNQEAVA4URnJhbWV3b3JrRGlzcGxheU5hbWUSLk5FVCBG
cmFtZXdvcmsgNC41AAAAtAAAAM7K774BAAAAkQAAAGxTeXN0ZW0uUmVzb3VyY2VzLlJlc291cmNl
UmVhZGVyLCBtc2NvcmxpYiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1Ymxp
Y0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkjU3lzdGVtLlJlc291cmNlcy5SdW50aW1lUmVzb3Vy
Y2VTZXQCAAAAAAAAAAAAAABQQURQQURQtAAAABQwAAAAAAAAAAAAAC4wAAAAIAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAgMAAAAAAAAAAAAAAAAF9Db3JEbGxNYWluAG1zY29yZWUuZGxsAAAAAAD/JQAg
ABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAEAEAAAABgAAIAAAAAAAAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAA
AEgAAABYQAAAWgQAAAAAAAAAAAAAWgQ0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8A
AAAAAL0E7/4AAAEAAAABAA1QfR8AAAEADVB9Hz8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABE
AAAAAQBWAGEAcgBGAGkAbABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8A
bgAAAAAAAACwBLoDAAABAFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAAJYDAAABADAAMAAw
ADAAMAA0AGIAMAAAABoAAQABAEMAbwBtAG0AZQBuAHQAcwAAAAAAAAAiAAEAAQBDAG8AbQBwAGEA
bgB5AE4AYQBtAGUAAAAAAAAAAAB+ACsAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAA
AAAAUwBUAF8AOQAyAGUAZQA5AGUANwBlADUAYgBlADIANAA4AGEAZgA4ADQAZAAwAGQAYgAyADYA
NQBmADQANQBiADAAYQBlAC4AYwBzAHAAcgBvAGoAAAAAAD4ADwABAEYAaQBsAGUAVgBlAHIAcwBp
AG8AbgAAAAAAMQAuADAALgA4ADAANgAxAC4AMgAwADQAOQAzAAAAAAB+AC8AAQBJAG4AdABlAHIA
bgBhAGwATgBhAG0AZQAAAFMAVABfADkAMgBlAGUAOQBlADcAZQA1AGIAZQAyADQAOABhAGYAOAA0
AGQAMABkAGIAMgA2ADUAZgA0ADUAYgAwAGEAZQAuAGMAcwBwAHIAbwBqAC4AZABsAGwAAAAAAEgA
EgABAEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAAEMAbwBwAHkAcgBpAGcAaAB0ACAAQAAg
ACAAMgAwADEANQAAACoAAQABAEwAZQBnAGEAbABUAHIAYQBkAGUAbQBhAHIAawBzAAAAAAAAAAAA
hgAvAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0AZQAAAFMAVABfADkAMgBlAGUAOQBl
ADcAZQA1AGIAZQAyADQAOABhAGYAOAA0AGQAMABkAGIAMgA2ADUAZgA0ADUAYgAwAGEAZQAuAGMA
cwBwAHIAbwBqAC4AZABsAGwAAAAAAHYAKwABAFAAcgBvAGQAdQBjAHQATgBhAG0AZQAAAAAAUwBU
AF8AOQAyAGUAZQA5AGUANwBlADUAYgBlADIANAA4AGEAZgA4ADQAZAAwAGQAYgAyADYANQBmADQA
NQBiADAAYQBlAC4AYwBzAHAAcgBvAGoAAAAAAEIADwABAFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBp
AG8AbgAAADEALgAwAC4AOAAwADYAMQAuADIAMAA0ADkAMwAAAAAARgAPAAEAQQBzAHMAZQBtAGIA
bAB5ACAAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4AOAAwADYAMQAuADIAMAA0ADkAMwAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAADAAAAEAwAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==</BinaryItem>
            </ScriptProject>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Foreach Loop Container 1\SFTP Task"
          DTS:CreationName="Microsoft.ScriptTask"
          DTS:Description="Script Task"
          DTS:DTSID="{9681C1D7-BD89-4C01-8DCE-2F4AF2561FCE}"
          DTS:ExecutableType="Microsoft.ScriptTask"
          DTS:ForceExecutionResult="0"
          DTS:LocaleID="-1"
          DTS:ObjectName="SFTP Task"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:EventHandlers>
            <DTS:EventHandler
              DTS:refId="Package\Foreach Loop Container 1\SFTP Task.EventHandlers[OnError]"
              DTS:CreationName="OnError"
              DTS:DTSID="{13EA4DC2-CD5C-4A5D-8930-432776D9C638}"
              DTS:EventID="0"
              DTS:EventName="OnError"
              DTS:LocaleID="-1">
              <DTS:Variables>
                <DTS:Variable
                  DTS:CreationName=""
                  DTS:Description="The propagate property of the event"
                  DTS:DTSID="{DFF67E60-4B99-4028-98B0-512EB0FDBD8C}"
                  DTS:IncludeInDebugDump="6789"
                  DTS:Namespace="System"
                  DTS:ObjectName="Propagate">
                  <DTS:VariableValue
                    DTS:DataType="11">-1</DTS:VariableValue>
                </DTS:Variable>
                <DTS:Variable
                  DTS:CreationName=""
                  DTS:DTSID="{18DE386A-066A-4151-9E34-5E90DEFB820B}"
                  DTS:IncludeInDebugDump="6789"
                  DTS:Namespace="User"
                  DTS:ObjectName="Propagate">
                  <DTS:VariableValue
                    DTS:DataType="11">0</DTS:VariableValue>
                </DTS:Variable>
              </DTS:Variables>
              <DTS:Executables />
            </DTS:EventHandler>
          </DTS:EventHandlers>
          <DTS:ObjectData>
            <ScriptProject
              Name="ST_8dee0adf973142fba443d8a34400791c"
              VSTAMajorVersion="15"
              VSTAMinorVersion="0"
              Language="CSharp"
              ReadWriteVariables="User::VarAgencyName,User::VarConnType,User::VarLocalPath,User::VarRemotePath,User::VarServerName,User::VarServerPassword,User::VarServerPort,User::VarServerUserName,User::VarZipFile">
              <ProjectItem
                Name="Properties\Resources.resx"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_8dee0adf973142fba443d8a34400791c.csproj.Properties.Settings.get_Default():ST_8dee0adf973142fba443d8a34400791c.csproj.Properties.Sett" +
    "ings")]

namespace ST_8dee0adf973142fba443d8a34400791c.csproj.Properties
{


    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase
    {

        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();

        public static Settings Default
        {
            get
            {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="ScriptMain.cs"
                Encoding="UTF8"><![CDATA[/*
   Microsoft SQL Server Integration Services Script Task
   Write scripts using Microsoft Visual C# 2008.
   The ScriptMain is the entry point class of the script.
*/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows.Forms;
using System.Data;
using System.Net;
using System.Data.SqlClient;
using System.IO;
using Renci.SshNet;
using Renci.SshNet.Sftp;
using System.Threading;
using Microsoft.SqlServer.Dts.Runtime;
using System.Net.Mail;


namespace ST_8dee0adf973142fba443d8a34400791c.csproj
{
    [Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {

        #region VSTA generated code
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

        public void Main()
        {
            // Calling the method to connect to SFTP Server
            ConnectToSFTPServer();

            // Checking if any file missing from an Agency
            CheckZipFileReceived();

            // TODO: Add your code here
            Dts.TaskResult = (int)ScriptResults.Success;
        }

        public void ConnectToSFTPServer()
        {
            try {

                SqlConnection conn = (SqlConnection)Dts.Connections["ADO.NETConnectionManager"].AcquireConnection(null);

                string AgencyName = null, ConnectionType = null, ServerName = null, UserName = null, Password = null, LocalPath = null, RemotePath = null;
                int Port = 0;

                string fileName = "";
                DateTime date = DateTime.Now;

                using (SqlDataAdapter dataAdapter = new SqlDataAdapter("SELECT AgencyName, ConnectionType, ServerName, ServerUserName, ServerPassword, ServerPort, LocalPath, RemotePath  FROM TrafficCitation_AgencyVendorInfo with (nolock) WHERE ConnectionType = 'SFTP' AND Active = 1", conn))
                {
                    DataSet dataSet = new DataSet();
                    dataAdapter.Fill(dataSet);
                    DataTable dataTable = dataSet.Tables["TrafficCitation_AgencyVendorInfo"];

                    Dts.Variables["User::VarAgencyName"].Value = "";

                    foreach (DataRow row in dataSet.Tables[0].Rows)
                    {
                        AgencyName = row["AgencyName"].ToString();
                        ConnectionType = row["ConnectionType"].ToString();
                        ServerName = row["ServerName"].ToString();
                        UserName = row["ServerUserName"].ToString();
                        Password = row["ServerPassword"].ToString();
                        Port = Convert.ToInt32(row["ServerPort"].ToString());
                        LocalPath = row["LocalPath"].ToString();
                        RemotePath = row["RemotePath"].ToString();


                        using (Renci.SshNet.SftpClient SFTPConn = new Renci.SshNet.SftpClient(ServerName, Port, UserName, Password))
                        {
                            SFTPConn.BufferSize = 1024 * 32 - 52;
                            SFTPConn.Connect();

                            // Setting timeout value for SFTP server to 10 minutes T.M. 3/15/2016
                            SFTPConn.ConnectionInfo.Timeout = TimeSpan.FromSeconds(600);

                            foreach (SftpFile File in SFTPConn.ListDirectory(RemotePath, null))
                            {
                                fileName = (string)File.Name;
                                if (fileName.EndsWith("zip"))
                                {
                                    SftpDownloadFile(fileName, LocalPath, RemotePath, SFTPConn);
                                    Dts.Variables["User::VarZipFile"].Value = fileName;
                                }
                                else
                                {
                                    Dts.Variables["User::VarZipFile"].Value = "";
                                }
                                DeleteDownloadedFile(fileName, SFTPConn);
                            }
                            // disconnect SFTPConn object T.M. 3/8/2016
                            SFTPConn.Disconnect();
                            SFTPConn.Dispose();
                        }


                    }
                }
                conn.Close();
            }
            catch (Exception ex)
            {
                // string testString = ex.Message.ToString();
                string erText = ex.Message;
                if (ex.InnerException != null) erText = erText + " : " + ex.InnerException.Message;
                erText = erText.Replace("'", "");
                LogScriptError(erText + "  Error at SFTP Task (Tracs) at ConnectToSFTPServer Function");

                // comment throw T.M 11/8/2017
                //throw;
            }
            finally
            {
                
            }
           
        }

        public void LogScriptError(string _error)
        {
            SqlCommand comm = new SqlCommand("Insert into dbo.TrafficCitation_Import_ErrorLog (ErrorMessage) values ('" + _error + "')");
            using (SqlConnection conn = new SqlConnection(Dts.Connections["ADO.NETConnectionManager"].ConnectionString))
            {
                comm.Connection = conn;
                conn.Open();
                comm.ExecuteNonQuery();
            }
        }

        public void SftpDownloadFile(string fileName, string UNCPath, string RemotePath, Renci.SshNet.SftpClient SFTPConn)
        {
            System.IO.Stream fout = null;
            string CurrentLocalPath = UNCPath + "\\" + fileName;
            string CurrentRemotePath = RemotePath + fileName;

            fout = new System.IO.FileStream(CurrentLocalPath, FileMode.Create);
            SFTPConn.DownloadFile(CurrentRemotePath, fout, null);
            fout.Close();
        }

        public void DeleteDownloadedFile(string downLoadedFile , SftpClient SFTPConn )
        {
            try {
                SqlConnection conn = (SqlConnection)Dts.Connections["ADO.NETConnectionManager"].AcquireConnection(null);

                string AgencyName = null, ConnectionType = null, ServerName = null, UserName = null, Password = null, LocalPath = null, RemotePath = null;
                int Port = 0;

                string fileName = "";
                DateTime date = DateTime.Now;

                using (SqlDataAdapter dataAdapter = new SqlDataAdapter("SELECT AgencyName, ConnectionType, ServerName, ServerUserName, ServerPassword, ServerPort, LocalPath, RemotePath  FROM TrafficCitation_AgencyVendorInfo with (nolock) WHERE ConnectionType = 'SFTP' AND Active = 1", conn))
                {
                    DataSet dataSet = new DataSet();
                    dataAdapter.Fill(dataSet);
                    DataTable dataTable = dataSet.Tables["TrafficCitation_AgencyVendorInfo"];

                    foreach (DataRow row in dataSet.Tables[0].Rows)
                    {
                        AgencyName = row["AgencyName"].ToString();
                        ConnectionType = row["ConnectionType"].ToString();
                        ServerName = row["ServerName"].ToString();
                        UserName = row["ServerUserName"].ToString();
                        Password = row["ServerPassword"].ToString();
                        Port = Convert.ToInt32(row["ServerPort"].ToString());
                        LocalPath = row["LocalPath"].ToString();
                        RemotePath = row["RemotePath"].ToString();

                        string[] AllFiles = Directory.GetFiles(LocalPath);

                        foreach (string FileNameWithPath in AllFiles)
                        {
                            fileName = Path.GetFileName(FileNameWithPath);
                            if (downLoadedFile == fileName)
                            {
                                SFTPConn.Delete(RemotePath + fileName);
                            }
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception ex)
            {
                // string testString = ex.Message.ToString();
                string erText = ex.Message;
                if (ex.InnerException != null) erText = erText + " : " + ex.InnerException.Message;
                erText = erText.Replace("'", "");
                LogScriptError(erText + "  Error at SFTP Task (Tracs) at DeleteDownloadedFile Function");

                // comment throw T.M 11/8/2017
                //throw;
            }
            finally
            {

            }
        }

        void CheckZipFileReceived()
        {
            try {
                if (Dts.Variables["User::VarConnType"].Value.ToString() == "SFTP")
                {
                    string agency = null;
                    string path = Dts.Variables["User::VarLocalPath"].Value.ToString();
                    int pos = path.LastIndexOf("\\") + 1;
                    agency = path.Substring(pos, path.Length - pos);
                    DirectoryInfo di = new DirectoryInfo(Dts.Variables["User::VarLocalPath"].Value.ToString());
                    FileInfo[] ZipFiles = di.GetFiles("*.zip");
                    if (ZipFiles.Length == 0)
                    {
                        sendMail(agency);
                    }
                }
            }
            catch (Exception ex)
            {
                // string testString = ex.Message.ToString();
                string erText = ex.Message;
                if (ex.InnerException != null) erText = erText + " : " + ex.InnerException.Message;
                erText = erText.Replace("'", "");
                LogScriptError(erText + " Error at SFTP Task (Tracs) at CheckZipFileReceived Function");

                // comment throw T.M 11/8/2017
                //throw;
            }
            finally
            {

            }
        }

        void sendMail(string agencyName)
        {
            MailMessage mail = new MailMessage("TraffiCitation_Import@myorangeclerk.com", "Tarig.Mudawi@myorangeclerk.com, Anthony.Payne@Myorangeclerk.com");
            SmtpClient client = new SmtpClient();
            client.Port = 25;
            client.DeliveryMethod = SmtpDeliveryMethod.Network;
            client.UseDefaultCredentials = false;
            client.Host = "mailrelay.MYORANGECLERK.NET";
            mail.Subject = "No file Available for " + agencyName;
            mail.Body = "No file received today " + DateTime.Now.ToString("M/d/yyyy") + " for " + agencyName;
            client.Send(mail);
        }

    }
}]]></ProjectItem>
              <ProjectItem
                Name="Project"
                Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>st_8dee0adf973142fba443d8a34400791c</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>st_8dee0adf973142fba443d8a34400791c</msb:DisplayName>
    <msb:ProjectId>{C1B0F74F-6970-4977-AB0E-67CEBC1B872B}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="st_8dee0adf973142fba443d8a34400791c.csproj" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="ScriptMain.cs" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
              <ProjectItem
                Name="Properties\AssemblyInfo.cs"
                Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_8dee0adf973142fba443d8a34400791c.csproj")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_8dee0adf973142fba443d8a34400791c.csproj")]
[assembly: AssemblyCopyright("Copyright @  2014")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
              <ProjectItem
                Name="st_8dee0adf973142fba443d8a34400791c.csproj"
                Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="utf-16"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- This section defines project-level properties.

       Configuration - Specifies whether the default configuration is Release or Debug.
       Platform - Specifies what CPU the output of this project can run on.
       OutputType - Must be "Library" for VSTA.
       NoStandardLibraries - Set to "false" for VSTA.
       RootNamespace - In C#, this specifies the namespace given to new files.
                       In Visual Basic, all objects are wrapped in this namespace at runtime.
       AssemblyName - Name of the output assembly.
  -->
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <OutputType>Library</OutputType>
    <NoStandardLibraries>false</NoStandardLibraries>
    <RootNamespace>ST_8dee0adf973142fba443d8a34400791c.csproj</RootNamespace>
    <AssemblyName>ST_8dee0adf973142fba443d8a34400791c.csproj</AssemblyName>
    <ProjectGuid>{5644D83D-73DF-4563-B761-01E32E3FD6D9}</ProjectGuid>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <TargetFrameworkProfile>
    </TargetFrameworkProfile>
  </PropertyGroup>
  <!-- This section defines properties that are set when the "Debug" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  -->
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <!-- This section defines properties that are set when the "Release" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  -->
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <!-- This section enables pre- and post-build steps. However,
       it is recommended that MSBuild tasks be used instead of these properties.
  -->
  <PropertyGroup>
    <PreBuildEvent>
    </PreBuildEvent>
    <PostBuildEvent>
    </PostBuildEvent>
  </PropertyGroup>
  <!-- This sections specifies references for the project. -->
  <ItemGroup>
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\IDE\PublicAssemblies\SSIS\140\Microsoft.SqlServer.ManagedDTS.dll</HintPath>
    </Reference>
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\IDE\PublicAssemblies\SSIS\140\Microsoft.SqlServer.ScriptTask.dll</HintPath>
    </Reference>
    <Reference Include="Renci.SshNet">
      <HintPath>C:\develop\Renci.SshNet.dll</HintPath>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.Core">
      <RequiredTargetFramework>3.5</RequiredTargetFramework>
    </Reference>
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
  </ItemGroup>
  <!-- This section defines the user source files that are part of the
       project.

       Compile - Specifies a source file to compile.
       EmbeddedResource - Specifies a .resx file for embedded resources.
       None - Specifies a file that is not to be passed to the compiler (for instance,
              a text file or XML file).
       AppDesigner - Specifies the directory where the application properties files can
                     be found.
  -->
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
    <!-- Include the default configuration information and metadata files for the add-in.
         These files are copied to the build output directory when the project is
         built, and the path to the configuration file is passed to add-in on the command
         line when debugging.
    -->
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="SSIS_ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST150</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.settings"
                Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_8dee0adf973142fba443d8a34400791c.csproj.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_8dee0adf973142fba443d8a34400791c.csproj.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_8dee0adf973142fba443d8a34400791c.csproj.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_8dee0adf973142fba443d8a34400791c.csproj.Properties
{


    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources
    {

        private static global::System.Resources.ResourceManager resourceMan;

        private static global::System.Globalization.CultureInfo resourceCulture;

        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources()
        {
        }

        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager
        {
            get
            {
                if ((resourceMan == null))
                {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_8dee0adf973142fba443d8a34400791c.csproj.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }

        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture
        {
            get
            {
                return resourceCulture;
            }
            set
            {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
              <BinaryItem
                Name="ST_8dee0adf973142fba443d8a34400791c.csproj.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAKx18WEAAAAAAAAAAOAAIiALATAAACYAAAAIAAAAAAAA+kUA
AAAgAAAAYAAAAAAAEAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAACgAAAAAgAAAAAAAAMAYIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAKhFAABPAAAAAGAAALgEAAAAAAAAAAAAAAAAAAAA
AAAAAIAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAACYAAAAgAAAAJgAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAALgEAAAAYAAAAAYAAAAoAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAIAAAAACAAAALgAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAADc
RQAAAAAAAEgAAAACAAUAoCgAAFAcAAABAAAAAAAAAPBEAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAGYCKAIAAAYCKAYAAAYCKBAAAAoWbxEAAAoqAAAbMAUAxAIA
AAEAABECKBAAAApvEgAACnIBAABwbxMAAAoUbxQAAAp0DwAAAQoUCxQMFA0UEwQUEwUWEwZyMwAA
cBMHKBUAAAomcjUAAHAGcxYAAAoTCHMXAAAKEwkRCBEJbxgAAAomEQlvGQAACnLcAQBwbxoAAAom
AigQAAAKbxsAAApyHgIAcG8cAAAKcjMAAHBvHQAAChEJbxkAAAoWbx4AAApvHwAACm8gAAAKEwo4
iwEAABEKbyEAAAp0LwAAASVyRgIAcG8iAAAKbyMAAAomJXJcAgBwbyIAAApvIwAACiYlcnoCAHBv
IgAACm8jAAAKCyVykAIAcG8iAAAKbyMAAAoMJXKuAgBwbyIAAApvIwAACg0lcswCAHBvIgAACm8j
AAAKKCQAAAoTBiVy4gIAcG8iAAAKbyMAAAoTBHL2AgBwbyIAAApvIwAAChMFBxEGCAlzJQAAChML
EQsgzH8AAG8mAAAKEQtvJwAAChELbygAAAojAAAAAADAgkAoKQAACm8qAAAKEQsRBRRvKwAACm8s
AAAKEwwrcREMby0AAApvLgAAChMHEQdyDAMAcG8vAAAKLCwCEQcRBBEFEQsoBAAABgIoEAAACm8b
AAAKchQDAHBvHAAAChEHbx0AAAorHwIoEAAACm8bAAAKchQDAHBvHAAACnIzAABwbx0AAAoCEQcR
CygFAAAGEQxvMAAACi2G3gwRDCwHEQxvMQAACtwRC28yAAAKEQtvMwAACt4MEQssBxELbzEAAArc
EQpvMAAACjpp/v//3hURCnUWAAABEw0RDSwHEQ1vMQAACtzeDBEILAcRCG8xAAAK3AZvNAAACt5V
Ew4RDm81AAAKEw8RDm82AAAKLBoRD3I2AwBwEQ5vNgAACm81AAAKKDcAAAoTDxEPcj4DAHByMwAA
cG84AAAKEw8CEQ9yQgMAcCg5AAAKKAMAAAbeACpBfAAAAgAAAI8BAAB+AAAADQIAAAwAAAAAAAAA
AgAAAFEBAADYAAAAKQIAAAwAAAAAAAAAAgAAAKUAAACeAQAAQwIAABUAAAAAAAAAAgAAAEoAAAAQ
AgAAWgIAAAwAAAAAAAAAAAAAAAAAAABuAgAAbgIAAFUAAAAXAAABGzADAFcAAAACAAARcrwDAHAD
ck8EAHAoNwAACnM6AAAKCgIoEAAACm8SAAAKcgEAAHBvEwAACm87AAAKczwAAAoLBgdvPQAACgdv
PgAACgZvPwAACibeCgcsBgdvMQAACtwqAAEQAAACADYAFkwACgAAAAATMAQALgAAAAMAABEUCgRy
VQQAcAMoNwAACgUDKDkAAAoLGHNAAAAKCg4EBwYUb0EAAAoGb0IAAAoqAAAbMAMA4gEAAAQAABEC
KBAAAApvEgAACnIBAABwbxMAAAoUbxQAAAp0DwAAAQoUCxQMcjMAAHANKBUAAAomcjUAAHAGcxYA
AAoTBHMXAAAKEwURBBEFbxgAAAomEQVvGQAACnLcAQBwbxoAAAomEQVvGQAAChZvHgAACm8fAAAK
byAAAAoTBjjUAAAAEQZvIQAACnQvAAABJXJGAgBwbyIAAApvIwAACiYlclwCAHBvIgAACm8jAAAK
JiVyegIAcG8iAAAKbyMAAAomJXKQAgBwbyIAAApvIwAACiYlcq4CAHBvIgAACm8jAAAKJiVyzAIA
cG8iAAAKbyMAAAooJAAACiYlcuICAHBvIgAACm8jAAAKC3L2AgBwbyIAAApvIwAACgwHKEMAAAoT
BxYTCCsnEQcRCJooRAAACg0DCShFAAAKLA0ECAkoOQAACm9GAAAKEQgXWBMIEQgRB45pMtERBm8w
AAAKOiD////eFREGdRYAAAETCREJLAcRCW8xAAAK3N4MEQQsBxEEbzEAAArcBm80AAAK3lUTChEK
bzUAAAoTCxEKbzYAAAosGhELcjYDAHARCm82AAAKbzUAAAooNwAAChMLEQtyPgMAcHIzAABwbzgA
AAoTCwIRC3JZBABwKDkAAAooAwAABt4AKgAAQUwAAAIAAAB6AAAA5wAAAGEBAAAVAAAAAAAAAAIA
AAA+AAAAOgEAAHgBAAAMAAAAAAAAAAAAAAAAAAAAjAEAAIwBAABVAAAAFwAAARswBAD3AAAABQAA
EQIoEAAACm8bAAAKctUEAHBvHAAACm9HAAAKbyMAAApy+QQAcChFAAAKLHgUCgIoEAAACm8bAAAK
cgMFAHBvHAAACm9HAAAKbyMAAAoLB3JVBABwb0gAAAoXWAwHCAdvSQAACghZb0oAAAoKAigQAAAK
bxsAAApyAwUAcG8cAAAKb0cAAApvIwAACnNLAAAKcikFAHBvTAAACo4tBwIGKAcAAAbeUQ0JbzUA
AAoTBAlvNgAACiwZEQRyNgMAcAlvNgAACm81AAAKKDcAAAoTBBEEcj4DAHByMwAAcG84AAAKEwQC
EQRyNQUAcCg5AAAKKAMAAAbeACoAARAAAAAAAAClpQBRFwAAARMwBgB2AAAABgAAEXKvBQBwcv8F
AHBzTQAACgpzTgAACiUfGW9PAAAKJRZvUAAACiUWb1EAAAolcn8GAHBvUgAACgZytwYAcAMoOQAA
Cm9TAAAKBnLlBgBwKBUAAAoLEgFyFQcAcChUAAAKcicHAHADKFUAAApvVgAACgZvVwAACioeAihY
AAAKKh4CKFkAAAoqrn4BAAAELR5yMwcAcNADAAACKFoAAApvWwAACnNcAAAKgAEAAAR+AQAABCoa
fgIAAAQqHgKAAgAABCoafgMAAAQqHgIoXQAACioucw4AAAaAAwAABCpCU0pCAQABAAAAAAAMAAAA
djQuMC4zMDMxOQAAAAAFAGwAAADsBgAAI34AAFgHAAA0CgAAI1N0cmluZ3MAAAAAjBEAALQHAAAj
VVMAQBkAABAAAAAjR1VJRAAAAFAZAAAAAwAAI0Jsb2IAAAAAAAAAAgAAAVcdogkJAwAAAPoBMwAW
AAABAAAAQwAAAAUAAAAGAAAADwAAAAkAAABdAAAAAgAAABAAAAAGAAAAAgAAAAMAAAAEAAAAAgAA
AAEAAAAGAAAAAQAAAAEAAAAAAJIFAQAAAAAABgCTA8UHBgAiBMUHBgDfAqYHDwBACAAABgAMAz4G
BgB2Az4GBgBXAz4GBgAJBD4GBgCzAz4GBgDMAz4GBgAjAz4GBgA+A3UECgDnAygFCgAuAigFDgCk
BnwJDgBGB3wJDgBOCWgABgB/B8oIEgCSCUEJBgAYAH0AEgCeAQ4HBgA5AdoFBgC7BtoFDgC3AHwJ
BgDKBTcAFgAaAXkFBgDQAdoFBgDhBdoFBgDCAqYHBgAbCdoFBgAkB+UHBgDhBikGFgCLAmMFFgDz
AmMFFgBlAhQGBgCnAsUHCgBRBSgFGgDhCNkBGgA0B9kBDgBJB8UGDgBQBmgADgAmAWgAGgCUCNkB
GgAwAdkBDgBkBmgADgBKAmgADgDrCWgABgC0CdoFEgBxCUEJEgDxBkEJBgDyBdoFBgABAH0ABgAP
ANoFBgCmBNoFDgCFBsUGDgCtAMUGBgDGBTcABgAFATcABgAdCjcABgDFBDcABgAABzcABgDYBjcA
FgCdCXkFFgDaAHkFBgD5AdoFBgBFAdoFBgAACj4GAAAAAC4AAAAAAAEAAQABABAAAAbeBDkAAQAB
AAAAEADsB08IeQABAAkAAAEQAKcITwiNAAMADQADAQAA/QgAAHEABAAQABEA5gXmAREAHgLqAREA
9QDvAQYGYADzAVaA7Qj2AVaA/gH2AVAgAAAAAIYABgYGAAEAbCAAAAAAhgBVBwYAAQC4IwAAAACG
AGkHEAABACwkAAAAAIYAaQH6AQIAaCQAAAAAhgCJAQMCBgCkJgAAAACBAJgABgAIALgnAAAAAIEA
iQUQAAgAOigAAAAAhhiZBwYACQBCKAAAAACDGJkHBgAJAEooAAAAAJMIIAcKAgkAdigAAAAAkwgG
Ag8CCQB9KAAAAACTCBICFQIJAIUoAAAAAJYIVgkcAgoAjCgAAAAAhhiZBwYACgCUKAAAAACRGJ8H
IQIKAAAAAQB4BwAAAQC8AQAAAgC3BAAAAwC/BAAABAALBgAAAQB6AQAAAgALBgAAAQDFAQAAAQBU
BAkAmQcBABEAmQcGABkAmQcKACkAmQcQADEAmQcQADkAmQcQAEEAmQcQAEkAmQcQAFEAmQcQAFkA
mQcQAGEAmQcQAGkAmQcGAOkAmQcGABEBmQcVACEBmQcGAHEA9QgcACkBYgkBACkB3QhBADEB0QVH
ADkBkgZOANkA4wlTAIEAmQdYAIkAmQcGAEEBwQVfAIkAhQhlAEkB0QVrACkBkAhyAFkB0QV4AGEB
SgR/AEkB0QWEAFEBCwmLAHEBiweRAJEAqAmWAHkB0QWaAPEApASfAIEBJgCjAJkAmQeoAJkAWgSw
AIkBLgkGAIkB7Qa1AJkBuQe7AJEBzgnCAJkAGQrJAAwAiwfiABQAqAnyAKkApwGfALEB1QT3AJEA
2gn8ALEAgwIGAIkBNgkGAIkBgwIGALkBfQIGALkADgGfALkAsgYAAbEBFAkFAbEB7QAMAbEBFAkS
AcEAmQcQADkBjwSfAHkAmQcQAMEAdgYfAbkB+wUGAMEBCQolAckBmQcvAZkAbQE3AckAfQIGANkB
nghaAeEBsAFgAbEBJwplAZkAoAIQAGEBQASWALEBaQR0AbEBygQlAbEBrQR5AekBmQcQAOkBngh/
AdEAmQeOAfkBmQcGAPkBvAkBAPkBxwCUAfkBsAibAfkBxQkQANEAIgkQANkApASgAbEBFAmlAdEA
8wkQAPkBwgCtAXEAmQcGAPEAmQcGAAkCVwGzAQkC/Am8AfkAmQfCARkBmQcGAAgAFADcAQgAGADh
ASkAcwBdAi4ACwA1Ai4AEwA+Ai4AGwBdAi4AIwBmAi4AKwCWAi4AMwCWAi4AOwCWAi4AQwBmAi4A
SwCcAi4AUwCWAi4AWwCzAkMAYwDhAUkAcwBdAmEAewDhAWMAawDhASIAGAEpAUQBawGHAQMAAQAE
AAMAAAAkByUCAAAmAioCAABaCTACAgAKAAMAAgALAAUAAQAMAAUAAgANAAcA2gDrAASAAAABAAAA
fR8uUAAAAAAAAN4EAAAEAAAAAAAAAAAAAADKAXQAAAAAAA4AAAAAAAAAAAAAANMBCQUAAAAABAAA
AAAAAAAAAAAAygFoAAAAAADdBwEAGwAAAAAAAAAAAEEJAAAAAAQAAAAAAAAAAAAAAMoB2gUAAAAA
DgAAAAAAAAAAAAAA0wFBAAAAAAAAAAAAAQAAAPYHAAAFAAIAAAAAAABJRW51bWVyYWJsZWAxAEFj
dGlvbmAxAElFbnVtZXJhdG9yYDEAVG9JbnQzMgA8TW9kdWxlPgBTeXN0ZW0uSU8ATWljcm9zb2Z0
LlNxbFNlcnZlci5NYW5hZ2VkRFRTAHZhbHVlX18AU3lzdGVtLkRhdGEAbXNjb3JsaWIAU3lzdGVt
LkNvbGxlY3Rpb25zLkdlbmVyaWMAQ2hlY2taaXBGaWxlUmVjZWl2ZWQARGJDb21tYW5kAFNxbENv
bW1hbmQAU2VuZABzZXRfRGVsaXZlcnlNZXRob2QAU210cERlbGl2ZXJ5TWV0aG9kAFJlcGxhY2UA
ZGVmYXVsdEluc3RhbmNlAEZpbGVNb2RlAGdldF9NZXNzYWdlAE1haWxNZXNzYWdlAERhdGFUYWJs
ZQBWYXJpYWJsZQBJRGlzcG9zYWJsZQBSdW50aW1lVHlwZUhhbmRsZQBHZXRUeXBlRnJvbUhhbmRs
ZQBTZnRwRG93bmxvYWRGaWxlAGRvd25Mb2FkZWRGaWxlAERlbGV0ZURvd25sb2FkZWRGaWxlAFNm
dHBGaWxlAGdldF9OYW1lAEdldEZpbGVOYW1lAGZpbGVOYW1lAGFnZW5jeU5hbWUARGF0ZVRpbWUA
TWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuUnVudGltZQBUeXBlAEZhaWx1cmUAZ2V0X0N1bHR1cmUA
c2V0X0N1bHR1cmUAcmVzb3VyY2VDdWx0dXJlAFZTVEFSVFNjcmlwdE9iamVjdE1vZGVsQmFzZQBJ
bnRlcm5hbERhdGFDb2xsZWN0aW9uQmFzZQBBcHBsaWNhdGlvblNldHRpbmdzQmFzZQBDbG9zZQBE
aXNwb3NlAEVkaXRvckJyb3dzYWJsZVN0YXRlAERlbGV0ZQBDb21waWxlckdlbmVyYXRlZEF0dHJp
YnV0ZQBEZWJ1Z2dlck5vblVzZXJDb2RlQXR0cmlidXRlAERlYnVnZ2FibGVBdHRyaWJ1dGUARWRp
dG9yQnJvd3NhYmxlQXR0cmlidXRlAEFzc2VtYmx5VGl0bGVBdHRyaWJ1dGUAQXNzZW1ibHlUcmFk
ZW1hcmtBdHRyaWJ1dGUAVGFyZ2V0RnJhbWV3b3JrQXR0cmlidXRlAEFzc2VtYmx5Q29uZmlndXJh
dGlvbkF0dHJpYnV0ZQBBc3NlbWJseURlc2NyaXB0aW9uQXR0cmlidXRlAENvbXBpbGF0aW9uUmVs
YXhhdGlvbnNBdHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5Q29weXJp
Z2h0QXR0cmlidXRlAFNTSVNTY3JpcHRUYXNrRW50cnlQb2ludEF0dHJpYnV0ZQBBc3NlbWJseUNv
bXBhbnlBdHRyaWJ1dGUAUnVudGltZUNvbXBhdGliaWxpdHlBdHRyaWJ1dGUAZ2V0X1ZhbHVlAHNl
dF9WYWx1ZQB2YWx1ZQBzZXRfQnVmZmVyU2l6ZQBMYXN0SW5kZXhPZgBTeXN0ZW0uUnVudGltZS5W
ZXJzaW9uaW5nAGdldF9Db25uZWN0aW9uU3RyaW5nAFRvU3RyaW5nAFN1YnN0cmluZwBVTkNQYXRo
AFJlbW90ZVBhdGgAZ2V0X0xlbmd0aABFbmRzV2l0aABTVF84ZGVlMGFkZjk3MzE0MmZiYTQ0M2Q4
YTM0NDAwNzkxYy5jc3Byb2oATWljcm9zb2Z0LlNxbFNlcnZlci5TY3JpcHRUYXNrAE1pY3Jvc29m
dC5TcWxTZXJ2ZXIuRHRzLlRhc2tzLlNjcmlwdFRhc2sAU2NyaXB0T2JqZWN0TW9kZWwAU3lzdGVt
LkNvbXBvbmVudE1vZGVsAFN5c3RlbS5OZXQuTWFpbABzZW5kTWFpbABTVF84ZGVlMGFkZjk3MzE0
MmZiYTQ0M2Q4YTM0NDAwNzkxYy5jc3Byb2ouZGxsAEZpbGwARmlsZVN0cmVhbQBnZXRfSXRlbQBT
eXN0ZW0ARW51bQByZXNvdXJjZU1hbgBUaW1lU3BhbgBPcGVuAFNjcmlwdE1haW4AU0ZUUENvbm4A
U3lzdGVtLkNvbmZpZ3VyYXRpb24AU3lzdGVtLkdsb2JhbGl6YXRpb24AU3lzdGVtLlJlZmxlY3Rp
b24ARGF0YVRhYmxlQ29sbGVjdGlvbgBEYXRhUm93Q29sbGVjdGlvbgBzZXRfQ29ubmVjdGlvbgBE
YkNvbm5lY3Rpb24AQWNxdWlyZUNvbm5lY3Rpb24AU3FsQ29ubmVjdGlvbgBnZXRfSW5uZXJFeGNl
cHRpb24AU3lzdGVtLkRhdGEuQ29tbW9uAEZpbGVJbmZvAEN1bHR1cmVJbmZvAGdldF9Db25uZWN0
aW9uSW5mbwBEaXJlY3RvcnlJbmZvAFJlbmNpLlNzaE5ldC5TZnRwAGdldF9SZXNvdXJjZU1hbmFn
ZXIAQ29ubmVjdGlvbk1hbmFnZXIAU3FsRGF0YUFkYXB0ZXIAQ29ubmVjdFRvU0ZUUFNlcnZlcgBM
b2dTY3JpcHRFcnJvcgBfZXJyb3IASUVudW1lcmF0b3IAR2V0RW51bWVyYXRvcgAuY3RvcgAuY2N0
b3IAU3lzdGVtLkRpYWdub3N0aWNzAEZyb21TZWNvbmRzAFN5c3RlbS5SdW50aW1lLkNvbXBpbGVy
U2VydmljZXMAU3lzdGVtLlJlc291cmNlcwBTVF84ZGVlMGFkZjk3MzE0MmZiYTQ0M2Q4YTM0NDAw
NzkxYy5jc3Byb2ouUHJvcGVydGllcy5SZXNvdXJjZXMucmVzb3VyY2VzAERlYnVnZ2luZ01vZGVz
AFNUXzhkZWUwYWRmOTczMTQyZmJhNDQzZDhhMzQ0MDA3OTFjLmNzcHJvai5Qcm9wZXJ0aWVzAGdl
dF9UYWJsZXMAZ2V0X1ZhcmlhYmxlcwBHZXRGaWxlcwBTZXR0aW5ncwBzZXRfVXNlRGVmYXVsdENy
ZWRlbnRpYWxzAFN5c3RlbS5Db2xsZWN0aW9ucwBnZXRfQ29ubmVjdGlvbnMAU3VjY2VzcwBnZXRf
RHRzAFNjcmlwdFJlc3VsdHMAZ2V0X1Jvd3MAQ29uY2F0AE9iamVjdABzZXRfU3ViamVjdABDb25u
ZWN0AERpc2Nvbm5lY3QAUmVuY2kuU3NoTmV0AERhdGFTZXQAZ2V0X0RlZmF1bHQAc2V0X1Rhc2tS
ZXN1bHQAQmFzZUNsaWVudABTeXN0ZW0uRGF0YS5TcWxDbGllbnQAU2Z0cENsaWVudABTbXRwQ2xp
ZW50AGdldF9DdXJyZW50AENvbnZlcnQAc2V0X1BvcnQAc2V0X0hvc3QAc2V0X1RpbWVvdXQATW92
ZU5leHQAZ2V0X05vdwBEYXRhUm93AHNldF9Cb2R5AGdldF9Bc3NlbWJseQBFeGVjdXRlTm9uUXVl
cnkATGlzdERpcmVjdG9yeQBvcF9FcXVhbGl0eQAAADFBAEQATwAuAE4ARQBUAEMAbwBuAG4AZQBj
AHQAaQBvAG4ATQBhAG4AYQBnAGUAcgAAAQCBpVMARQBMAEUAQwBUACAAQQBnAGUAbgBjAHkATgBh
AG0AZQAsACAAQwBvAG4AbgBlAGMAdABpAG8AbgBUAHkAcABlACwAIABTAGUAcgB2AGUAcgBOAGEA
bQBlACwAIABTAGUAcgB2AGUAcgBVAHMAZQByAE4AYQBtAGUALAAgAFMAZQByAHYAZQByAFAAYQBz
AHMAdwBvAHIAZAAsACAAUwBlAHIAdgBlAHIAUABvAHIAdAAsACAATABvAGMAYQBsAFAAYQB0AGgA
LAAgAFIAZQBtAG8AdABlAFAAYQB0AGgAIAAgAEYAUgBPAE0AIABUAHIAYQBmAGYAaQBjAEMAaQB0
AGEAdABpAG8AbgBfAEEAZwBlAG4AYwB5AFYAZQBuAGQAbwByAEkAbgBmAG8AIAB3AGkAdABoACAA
KABuAG8AbABvAGMAawApACAAVwBIAEUAUgBFACAAQwBvAG4AbgBlAGMAdABpAG8AbgBUAHkAcABl
ACAAPQAgACcAUwBGAFQAUAAnACAAQQBOAEQAIABBAGMAdABpAHYAZQAgAD0AIAAxAAFBVAByAGEA
ZgBmAGkAYwBDAGkAdABhAHQAaQBvAG4AXwBBAGcAZQBuAGMAeQBWAGUAbgBkAG8AcgBJAG4AZgBv
AAAnVQBzAGUAcgA6ADoAVgBhAHIAQQBnAGUAbgBjAHkATgBhAG0AZQAAFUEAZwBlAG4AYwB5AE4A
YQBtAGUAAB1DAG8AbgBuAGUAYwB0AGkAbwBuAFQAeQBwAGUAABVTAGUAcgB2AGUAcgBOAGEAbQBl
AAAdUwBlAHIAdgBlAHIAVQBzAGUAcgBOAGEAbQBlAAAdUwBlAHIAdgBlAHIAUABhAHMAcwB3AG8A
cgBkAAAVUwBlAHIAdgBlAHIAUABvAHIAdAAAE0wAbwBjAGEAbABQAGEAdABoAAAVUgBlAG0AbwB0
AGUAUABhAHQAaAAAB3oAaQBwAAAhVQBzAGUAcgA6ADoAVgBhAHIAWgBpAHAARgBpAGwAZQAAByAA
OgAgAAADJwABeSAAIABFAHIAcgBvAHIAIABhAHQAIABTAEYAVABQACAAVABhAHMAawAgACgAVABy
AGEAYwBzACkAIABhAHQAIABDAG8AbgBuAGUAYwB0AFQAbwBTAEYAVABQAFMAZQByAHYAZQByACAA
RgB1AG4AYwB0AGkAbwBuAACAkUkAbgBzAGUAcgB0ACAAaQBuAHQAbwAgAGQAYgBvAC4AVAByAGEA
ZgBmAGkAYwBDAGkAdABhAHQAaQBvAG4AXwBJAG0AcABvAHIAdABfAEUAcgByAG8AcgBMAG8AZwAg
ACgARQByAHIAbwByAE0AZQBzAHMAYQBnAGUAKQAgAHYAYQBsAHUAZQBzACAAKAAnAAEFJwApAAED
XAAAeyAAIABFAHIAcgBvAHIAIABhAHQAIABTAEYAVABQACAAVABhAHMAawAgACgAVAByAGEAYwBz
ACkAIABhAHQAIABEAGUAbABlAHQAZQBEAG8AdwBuAGwAbwBhAGQAZQBkAEYAaQBsAGUAIABGAHUA
bgBjAHQAaQBvAG4AACNVAHMAZQByADoAOgBWAGEAcgBDAG8AbgBuAFQAeQBwAGUAAAlTAEYAVABQ
AAAlVQBzAGUAcgA6ADoAVgBhAHIATABvAGMAYQBsAFAAYQB0AGgAAAsqAC4AegBpAHAAAHkgAEUA
cgByAG8AcgAgAGEAdAAgAFMARgBUAFAAIABUAGEAcwBrACAAKABUAHIAYQBjAHMAKQAgAGEAdAAg
AEMAaABlAGMAawBaAGkAcABGAGkAbABlAFIAZQBjAGUAaQB2AGUAZAAgAEYAdQBuAGMAdABpAG8A
bgAAT1QAcgBhAGYAZgBpAEMAaQB0AGEAdABpAG8AbgBfAEkAbQBwAG8AcgB0AEAAbQB5AG8AcgBh
AG4AZwBlAGMAbABlAHIAawAuAGMAbwBtAAB/VABhAHIAaQBnAC4ATQB1AGQAYQB3AGkAQABtAHkA
bwByAGEAbgBnAGUAYwBsAGUAcgBrAC4AYwBvAG0ALAAgAEEAbgB0AGgAbwBuAHkALgBQAGEAeQBu
AGUAQABNAHkAbwByAGEAbgBnAGUAYwBsAGUAcgBrAC4AYwBvAG0AADdtAGEAaQBsAHIAZQBsAGEA
eQAuAE0AWQBPAFIAQQBOAEcARQBDAEwARQBSAEsALgBOAEUAVAAALU4AbwAgAGYAaQBsAGUAIABB
AHYAYQBpAGwAYQBiAGwAZQAgAGYAbwByACAAAC9OAG8AIABmAGkAbABlACAAcgBlAGMAZQBpAHYA
ZQBkACAAdABvAGQAYQB5ACAAABFNAC8AZAAvAHkAeQB5AHkAAAsgAGYAbwByACAAAH9TAFQAXwA4
AGQAZQBlADAAYQBkAGYAOQA3ADMAMQA0ADIAZgBiAGEANAA0ADMAZAA4AGEAMwA0ADQAMAAwADcA
OQAxAGMALgBjAHMAcAByAG8AagAuAFAAcgBvAHAAZQByAHQAaQBlAHMALgBSAGUAcwBvAHUAcgBj
AGUAcwAAAHpyx14uw1BKkmxL3MDXHWsABCABAQgDIAABBSABARERBCABAQ4GIAEBEYCFBSAAEoCV
HgcQEj0ODg4ODggOEkESRRJJEk0VElEBElUSWRJdDgUgABKAmQYgARKAnRwEIAEcHAQAABFtBiAC
AQ4SPQUgAQgSRQUgABKApQYgARKAqQ4FIAASgK0GIAESgLEcBCABARwGIAESgKkIBSAAEoC1BCAA
EkkDIAAcBCABHA4DIAAOBAABCA4HIAQBDggODgQgAQEJBSAAEoDJBgABEYDNDQYgAQERgM0QIAIV
EoDRARJVDhUSgNUBCAcVEoDRARJVCCAAFRJRARMABhUSUQESVQQgABMABCABAg4DIAACBCAAEl0G
AAMODg4OBSACDg4OBQACDg4OBgcCEmESPQUgAQESPQMgAAgFBwISZQ4HIAIBDhGA6QwgAwEOEmUV
EoDVAQsVBwwSPQ4ODhJBEkUSSR0OCBJZEl0OBQABHQ4OBAABDg4FAAICDg4IBwUODggSXQ4EIAEI
DgUgAg4ICAcgAR0SgPkOBgcCEmkRbQUgAgEODgYgAQERgQEEIAEBAgQgAQ4OBwAEDg4ODg4FIAEB
EmkIAAESgQURgQkFIAASgQ0HIAIBDhKBDQi3elxWGTTgiQiJhF3NgIDMkQQAAAAABAEAAAADBhJ9
BAYSgIEDBhIQAgYIAwYRFAggBAEODg4STQYgAgEOEk0EAAASfQUAABKAgQYAAQESgIEEAAASEAMA
AAEECAASfQUIABKAgQQIABIQCAEACAAAAAAAHgEAAQBUAhZXcmFwTm9uRXhjZXB0aW9uVGhyb3dz
AQgBAAIAAAAAAC8BACpTVF84ZGVlMGFkZjk3MzE0MmZiYTQ0M2Q4YTM0NDAwNzkxYy5jc3Byb2oA
AAUBAAAAABYBABFDb3B5cmlnaHQgQCAgMjAxNAAASQEAGi5ORVRGcmFtZXdvcmssVmVyc2lvbj12
NC41AQBUDhRGcmFtZXdvcmtEaXNwbGF5TmFtZRIuTkVUIEZyYW1ld29yayA0LjUAAAC0AAAAzsrv
vgEAAACRAAAAbFN5c3RlbS5SZXNvdXJjZXMuUmVzb3VyY2VSZWFkZXIsIG1zY29ybGliLCBWZXJz
aW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0
ZTA4OSNTeXN0ZW0uUmVzb3VyY2VzLlJ1bnRpbWVSZXNvdXJjZVNldAIAAAAAAAAAAAAAAFBBRFBB
RFC0AAAA0EUAAAAAAAAAAAAA6kUAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAANxFAAAAAAAAAAAA
AAAAX0NvckRsbE1haW4AbXNjb3JlZS5kbGwAAAAAAP8lACAAEAAAAAAAAAAAAAAAAAAAAQAQAAAA
GAAAgAAAAAAAAAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAAAFhgAABa
BAAAAAAAAAAAAABaBDQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAAvQTv/gAA
AQAAAAEALlB9HwAAAQAuUH0fPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAABAFYAYQBy
AEYAaQBsAGUASQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAAAAAAALAE
ugMAAAEAUwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAAlgMAAAEAMAAwADAAMAAwADQAYgAw
AAAAGgABAAEAQwBvAG0AbQBlAG4AdABzAAAAAAAAACIAAQABAEMAbwBtAHAAYQBuAHkATgBhAG0A
ZQAAAAAAAAAAAH4AKwABAEYAaQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBuAAAAAABTAFQAXwA4
AGQAZQBlADAAYQBkAGYAOQA3ADMAMQA0ADIAZgBiAGEANAA0ADMAZAA4AGEAMwA0ADQAMAAwADcA
OQAxAGMALgBjAHMAcAByAG8AagAAAAAAPgAPAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAx
AC4AMAAuADgAMAA2ADEALgAyADAANQAyADYAAAAAAH4ALwABAEkAbgB0AGUAcgBuAGEAbABOAGEA
bQBlAAAAUwBUAF8AOABkAGUAZQAwAGEAZABmADkANwAzADEANAAyAGYAYgBhADQANAAzAGQAOABh
ADMANAA0ADAAMAA3ADkAMQBjAC4AYwBzAHAAcgBvAGoALgBkAGwAbAAAAAAASAASAAEATABlAGcA
YQBsAEMAbwBwAHkAcgBpAGcAaAB0AAAAQwBvAHAAeQByAGkAZwBoAHQAIABAACAAIAAyADAAMQA0
AAAAKgABAAEATABlAGcAYQBsAFQAcgBhAGQAZQBtAGEAcgBrAHMAAAAAAAAAAACGAC8AAQBPAHIA
aQBnAGkAbgBhAGwARgBpAGwAZQBuAGEAbQBlAAAAUwBUAF8AOABkAGUAZQAwAGEAZABmADkANwAz
ADEANAAyAGYAYgBhADQANAAzAGQAOABhADMANAA0ADAAMAA3ADkAMQBjAC4AYwBzAHAAcgBvAGoA
LgBkAGwAbAAAAAAAdgArAAEAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAAAABTAFQAXwA4AGQAZQBl
ADAAYQBkAGYAOQA3ADMAMQA0ADIAZgBiAGEANAA0ADMAZAA4AGEAMwA0ADQAMAAwADcAOQAxAGMA
LgBjAHMAcAByAG8AagAAAAAAQgAPAAEAUAByAG8AZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAAMQAu
ADAALgA4ADAANgAxAC4AMgAwADUAMgA2AAAAAABGAA8AAQBBAHMAcwBlAG0AYgBsAHkAIABWAGUA
cgBzAGkAbwBuAAAAMQAuADAALgA4ADAANgAxAC4AMgAwADUAMgA2AAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAMAAAA/DUAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</BinaryItem>
            </ScriptProject>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Foreach Loop Container 1\Shared Folder File Transfer"
          DTS:CreationName="Microsoft.ScriptTask"
          DTS:Description="Script Task"
          DTS:DTSID="{0F1FF8B0-4C7B-4FBA-9D58-2BA3ED6B4E19}"
          DTS:ExecutableType="Microsoft.ScriptTask"
          DTS:ForceExecutionResult="0"
          DTS:LocaleID="-1"
          DTS:ObjectName="Shared Folder File Transfer"
          DTS:ThreadHint="1">
          <DTS:Variables />
          <DTS:EventHandlers>
            <DTS:EventHandler
              DTS:refId="Package\Foreach Loop Container 1\Shared Folder File Transfer.EventHandlers[OnError]"
              DTS:CreationName="OnError"
              DTS:DTSID="{2A1EBF1F-CD1D-4890-B07A-D8A87DFB3934}"
              DTS:EventID="0"
              DTS:EventName="OnError"
              DTS:LocaleID="-1">
              <DTS:Variables>
                <DTS:Variable
                  DTS:CreationName=""
                  DTS:Description="The propagate property of the event"
                  DTS:DTSID="{17331246-D34E-4194-8417-C1616F2AA66A}"
                  DTS:IncludeInDebugDump="6789"
                  DTS:Namespace="System"
                  DTS:ObjectName="Propagate">
                  <DTS:VariableValue
                    DTS:DataType="11">-1</DTS:VariableValue>
                </DTS:Variable>
              </DTS:Variables>
              <DTS:Executables />
            </DTS:EventHandler>
            <DTS:EventHandler
              DTS:refId="Package\Foreach Loop Container 1\Shared Folder File Transfer.EventHandlers[OnTaskFailed]"
              DTS:CreationName="OnTaskFailed"
              DTS:DTSID="{600CF1FB-4528-4AE1-8020-2B92F0E9B20B}"
              DTS:EventID="0"
              DTS:EventName="OnTaskFailed"
              DTS:LocaleID="-1">
              <DTS:Variables>
                <DTS:Variable
                  DTS:CreationName=""
                  DTS:Description="The propagate property of the event"
                  DTS:DTSID="{5B11E078-8A47-45A2-ACA7-2997CAE23DF9}"
                  DTS:IncludeInDebugDump="6789"
                  DTS:Namespace="System"
                  DTS:ObjectName="Propagate">
                  <DTS:VariableValue
                    DTS:DataType="11">-1</DTS:VariableValue>
                </DTS:Variable>
              </DTS:Variables>
              <DTS:Executables />
            </DTS:EventHandler>
          </DTS:EventHandlers>
          <DTS:ObjectData>
            <ScriptProject
              Name="ST_b10f542c26f241a595df7be1a7d65adb"
              VSTAMajorVersion="15"
              VSTAMinorVersion="0"
              Language="CSharp">
              <ProjectItem
                Name="Properties\Resources.resx"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_b10f542c26f241a595df7be1a7d65adb.csproj.Properties.Settings.get_Default():ST_b10f542c26f241a595df7be1a7d65adb.csproj.Properties.Sett" +
    "ings")]

namespace ST_b10f542c26f241a595df7be1a7d65adb.csproj.Properties
{


    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase
    {

        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();

        public static Settings Default
        {
            get
            {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="ScriptMain.cs"
                Encoding="UTF8"><![CDATA[/*
   Microsoft SQL Server Integration Services Script Task
   Write scripts using Microsoft Visual C# 2008.
   The ScriptMain is the entry point class of the script.
*/

using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.Net;
using System.IO;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Reflection;

namespace ST_c298d4749e8b4114ba744da88514fc4c.csproj
{
    [Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {

        #region VSTA generated code
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion
        public void Main()
        {
            // Locate the Agency
            LocateAgency();

            Dts.TaskResult = (int)ScriptResults.Success;
        }

        void LocateAgency()
        {
            // Added try catch to this function T.M. 10/9/2017
            try
            {

                SqlConnection conn = (SqlConnection)Dts.Connections["ADO.NETConnectionManager"].AcquireConnection(null);

                string agencyName = null;
                string serverName = null;
                string serverUserName = null;
                string serverPassword = null;
                string serverPort = null;
                string localPath = null;
                string remotePath = null;

                using (SqlDataAdapter dataAdapter = new SqlDataAdapter("SELECT AgencyName, ConnectionType, ServerName, ServerUserName, ServerPassword, ServerPort, LocalPath, RemotePath  FROM TrafficCitation_AgencyVendorInfo with (nolock) WHERE ConnectionType = 'FTP' AND Active = 1", conn))
                {
                    DataSet dataSet = new DataSet();
                    dataAdapter.Fill(dataSet);
                    DataTable dataTable = dataSet.Tables["TrafficCitation_AgencyVendorInfo"];

                    foreach (DataRow row in dataSet.Tables[0].Rows)
                    {
                        agencyName = row["AgencyName"].ToString();
                        serverName = row["ServerName"].ToString();
                        serverUserName = row["ServerUserName"].ToString();
                        serverPassword = row["ServerPassword"].ToString();
                        serverPort = row["ServerPort"].ToString();
                        localPath = row["LocalPath"].ToString();
                        remotePath = row["RemotePath"].ToString();

                        CopyFiles(agencyName, serverName, serverUserName, serverPassword, serverPort, localPath, remotePath);
                    }
                }

                conn.Close();
            }
            catch (Exception ex)
            {

                string erText = ex.Message;
                if (ex.InnerException != null) erText = erText + " : " + ex.InnerException.Message;
                erText = erText.Replace("'", "");
                LogScriptError(erText + " Error in Shared Folder Task at LocateAgency Function");

            }
        }

        void CopyFiles(string agencyName, string serverName, string serverUserName, string serverPassword, string serverPort, string localPath, string remotePath)
        {

            try
            {
                string fileName = null;
                string sourcePath = remotePath;
                string targetPath = localPath;
                string sourceFile = null;
                string destFile = null;
                string folderName = null;
                string directoryName = null;
                int position = 0, year = 0, month = 0, day = 0;

                string[] sourceFolders = Directory.GetDirectories(sourcePath);

                foreach (var directory in sourceFolders)
                {
                    position = directory.LastIndexOf("\\") + 1;
                    folderName = directory.Substring(position, directory.Length - position);

                    string[] fileEntries = Directory.GetFiles(directory);

                    sourcePath = remotePath + "\\" + folderName;                 
                    
                    foreach (var file in fileEntries)
                    {
                        directoryName = directory.ToString();

                        year = Int16.Parse(directoryName.Substring(directoryName.Length - 8, 4));
                        month = Int16.Parse(directoryName.Substring(directoryName.Length - 4, 2));
                        day = Int16.Parse(directoryName.Substring(directoryName.Length - 2, 2));

                        fileName = System.IO.Path.GetFileName(file);

                        sourceFile = System.IO.Path.Combine(sourcePath, fileName);
                        destFile = System.IO.Path.Combine(targetPath, fileName);

                        System.IO.File.Copy(sourceFile, destFile, true);

                        File.SetLastWriteTime(destFile, new DateTime(year, month, day));

                    }
                }


            }
            catch (Exception ex)
            {
                string erText = ex.Message;
                if (ex.InnerException != null) erText = erText + " : " + ex.InnerException.Message;
                erText = erText.Replace("'", "");
                LogScriptError(erText + " Error in Shared Folder Task at CopyFiles Function");
            }
        }


        public void LogScriptError(string _error)
        {
            SqlCommand comm = new SqlCommand("Insert into dbo.TrafficCitation_Import_ErrorLog (ErrorMessage) values ('" + _error + "')");
            using (SqlConnection conn = new SqlConnection(Dts.Connections["ADO.NETConnectionManager"].ConnectionString))
            {
                comm.Connection = conn;
                conn.Open();
                comm.ExecuteNonQuery();
            }
        }
    }
}

    ]]></ProjectItem>
              <ProjectItem
                Name="Project"
                Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>st_b10f542c26f241a595df7be1a7d65adb</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>st_b10f542c26f241a595df7be1a7d65adb</msb:DisplayName>
    <msb:ProjectId>{6FB5BC6A-09B4-4CAE-AE8A-E3CA67A7D0F0}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="st_b10f542c26f241a595df7be1a7d65adb.csproj" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="ScriptMain.cs" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
              <ProjectItem
                Name="Properties\AssemblyInfo.cs"
                Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_b10f542c26f241a595df7be1a7d65adb.csproj")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_b10f542c26f241a595df7be1a7d65adb.csproj")]
[assembly: AssemblyCopyright("Copyright @  2014")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
              <ProjectItem
                Name="st_b10f542c26f241a595df7be1a7d65adb.csproj"
                Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="utf-16"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- This section defines project-level properties.

       Configuration - Specifies whether the default configuration is Release or Debug.
       Platform - Specifies what CPU the output of this project can run on.
       OutputType - Must be "Library" for VSTA.
       NoStandardLibraries - Set to "false" for VSTA.
       RootNamespace - In C#, this specifies the namespace given to new files.
                       In Visual Basic, all objects are wrapped in this namespace at runtime.
       AssemblyName - Name of the output assembly.
  -->
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <OutputType>Library</OutputType>
    <NoStandardLibraries>false</NoStandardLibraries>
    <RootNamespace>ST_b10f542c26f241a595df7be1a7d65adb.csproj</RootNamespace>
    <AssemblyName>ST_b10f542c26f241a595df7be1a7d65adb.csproj</AssemblyName>
    <ProjectGuid>{22946012-495D-4807-B018-927A28E1DD83}</ProjectGuid>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <TargetFrameworkProfile>
    </TargetFrameworkProfile>
  </PropertyGroup>
  <!-- This section defines properties that are set when the "Debug" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  -->
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <!-- This section defines properties that are set when the "Release" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  -->
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <!-- This section enables pre- and post-build steps. However,
       it is recommended that MSBuild tasks be used instead of these properties.
  -->
  <PropertyGroup>
    <PreBuildEvent>
    </PreBuildEvent>
    <PostBuildEvent>
    </PostBuildEvent>
  </PropertyGroup>
  <!-- This sections specifies references for the project. -->
  <ItemGroup>
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\IDE\PublicAssemblies\SSIS\140\Microsoft.SqlServer.ManagedDTS.dll</HintPath>
    </Reference>
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\IDE\PublicAssemblies\SSIS\140\Microsoft.SqlServer.ScriptTask.dll</HintPath>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
  </ItemGroup>
  <!-- This section defines the user source files that are part of the
       project.

       Compile - Specifies a source file to compile.
       EmbeddedResource - Specifies a .resx file for embedded resources.
       None - Specifies a file that is not to be passed to the compiler (for instance,
              a text file or XML file).
       AppDesigner - Specifies the directory where the application properties files can
                     be found.
  -->
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
    <!-- Include the default configuration information and metadata files for the add-in.
         These files are copied to the build output directory when the project is
         built, and the path to the configuration file is passed to add-in on the command
         line when debugging.
    -->
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="SSIS_ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST150</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.settings"
                Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_b10f542c26f241a595df7be1a7d65adb.csproj.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_b10f542c26f241a595df7be1a7d65adb.csproj.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_b10f542c26f241a595df7be1a7d65adb.csproj.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_b10f542c26f241a595df7be1a7d65adb.csproj.Properties
{


    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources
    {

        private static global::System.Resources.ResourceManager resourceMan;

        private static global::System.Globalization.CultureInfo resourceCulture;

        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources()
        {
        }

        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager
        {
            get
            {
                if ((resourceMan == null))
                {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_b10f542c26f241a595df7be1a7d65adb.csproj.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }

        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture
        {
            get
            {
                return resourceCulture;
            }
            set
            {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
              <BinaryItem
                Name="ST_b10f542c26f241a595df7be1a7d65adb.csproj.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAOl18WEAAAAAAAAAAOAAIiALATAAABwAAAAIAAAAAAAARjsA
AAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAACAAAAAAgAAAAAAAAMAYIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAPQ6AABPAAAAAEAAALgEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAATBsAAAAgAAAAHAAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAALgEAAAAQAAAAAYAAAAeAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAJAAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAAAo
OwAAAAAAAEgAAAACAAUA1CQAAGgVAAABAAAAAAAAADw6AAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAE4CKAIAAAYCKBAAAAoWbxEAAAoqGzAIAKcBAAABAAARAigQ
AAAKbxIAAApyAQAAcG8TAAAKFG8UAAAKdA8AAAEKFAsUDBQNFBMEFBMFFBMGFBMHcjMAAHAGcxUA
AAoTCHMWAAAKEwkRCBEJbxcAAAomEQlvGAAACnLYAQBwbxkAAAomEQlvGAAAChZvGgAACm8bAAAK
bxwAAAoTCjiXAAAAEQpvHQAACnQnAAABJXIaAgBwbx4AAApvHwAACgslcjACAHBvHgAACm8fAAAK
DCVyRgIAcG8eAAAKbx8AAAoNJXJkAgBwbx4AAApvHwAAChMEJXKCAgBwbx4AAApvHwAAChMFJXKY
AgBwbx4AAApvHwAAChMGcqwCAHBvHgAACm8fAAAKEwcCBwgJEQQRBREGEQcoAwAABhEKbyAAAAo6
Xf///94VEQp1EwAAARMLEQssBxELbyEAAArc3gwRCCwHEQhvIQAACtwGbyIAAAreVRMMEQxvIwAA
ChMNEQxvJAAACiwaEQ1ywgIAcBEMbyQAAApvIwAACiglAAAKEw0RDXLKAgBwcs4CAHBvJgAAChMN
AhENctACAHAoJwAACigEAAAG3gAqAEFMAAACAAAAfAAAAKoAAAAmAQAAFQAAAAAAAAACAAAAQAAA
AP0AAAA9AQAADAAAAAAAAAAAAAAAAAAAAFEBAABRAQAAVQAAABQAAAEbMAUAaQEAAAIAABEUCg4H
Cw4GDBQNFBMEFhMFFhMGFhMHFhMIBygoAAAKEwkWEwo43QAAABEJEQqaEwsRC3I8AwBwbykAAAoX
WBMFEQsRBRELbyoAAAoRBVlvKwAAChMEEQsoLAAACg4HcjwDAHARBCglAAAKCxMMFhMNOIAAAAAR
DBENmhELbx8AAAolJW8qAAAKHlkabysAAAooLQAAChMGJSVvKgAAChpZGG8rAAAKKC0AAAoTByVv
KgAAChhZGG8rAAAKKC0AAAoTCCguAAAKCgcGKC8AAAoIBigvAAAKDQkXKDAAAAoJEQYRBxEIczEA
AAooMgAAChENF1gTDRENEQyOaT91////EQoXWBMKEQoRCY5pPxj////eVRMOEQ5vIwAAChMPEQ5v
JAAACiwaEQ9ywgIAcBEObyQAAApvIwAACiglAAAKEw8RD3LKAgBwcs4CAHBvJgAAChMPAhEPckAD
AHAoJwAACigEAAAG3gAqAAAAQRwAAAAAAAAAAAAAEwEAABMBAABVAAAAFAAAARswAwBXAAAAAwAA
EXKmAwBwA3I5BABwKCUAAApzMwAACgoCKBAAAApvEgAACnIBAABwbxMAAApvNAAACnM1AAAKCwYH
bzYAAAoHbzcAAAoGbzgAAAom3goHLAYHbyEAAArcKgABEAAAAgA2ABZMAAoAAAAAHgIoOQAACioe
Aig6AAAKKq5+AQAABC0ecj8EAHDQAwAAAig7AAAKbzwAAApzPQAACoABAAAEfgEAAAQqGn4CAAAE
Kh4CgAIAAAQqGn4DAAAEKh4CKD4AAAoqLnMLAAAGgAMAAAQqAABCU0pCAQABAAAAAAAMAAAAdjQu
MC4zMDMxOQAAAAAFAGwAAACABQAAI34AAOwFAAB0CAAAI1N0cmluZ3MAAAAAYA4AAMAEAAAjVVMA
IBMAABAAAAAjR1VJRAAAADATAAA4AgAAI0Jsb2IAAAAAAAAAAgAAAVcdogEJAwAAAPoBMwAWAAAB
AAAAMgAAAAUAAAAGAAAADAAAAAkAAAA+AAAAAgAAABAAAAADAAAAAgAAAAMAAAAEAAAAAQAAAAUA
AAABAAAAAQAAAAAA0AQBAAAAAAAGAOkCigYGAHgDigYGADUCdwYPAAUHAAAGAGICXwUGAMwCXwUG
AK0CXwUGAF8DXwUGAAkDXwUGACIDXwUGAHkCXwUGAJQCqAMKAD0DfwQKAIUBfwQOAMUF+wcOACsG
+wcOANgHQQAGAFAGgAcGAKgADQUGANwFDQUOAGAA+wcGABQFDQUGABgCdwYGANEHDQUGAAkGqgYG
APkFSgUSAOgBugQSAEkCugQSALwBNQUGAP0BigYKAKgEfwQWAJcHKAEWABkGKAEOAC4G5gUOAHEF
QQAOAJ4AQQAOAIUFQQAOAKEBQQAOADEIQQAOAKYF5gUGANkDDQUGAGgIEAAGAAEADQUGAPoDEAAG
ANgAEAAGAA4BDQUOAFYA5gUGAFABDQUGALQADQUGAEoIXwUAAAAABwAAAAAAAQABAAEAEAAqBTUE
OQABAAEAAAAQALEGIwdhAAEABgAAARAAdwcjB3UAAwAKAAMBAACzBwAAWQAEAA0AEQAZBSkBEQB1
AS0BEQCCADEBBgY5ADUBVoCjBzgBVoBVATgBUCAAAAAAhgAwBQYAAQBkIAAAAACBADkIBgABAGQi
AAAAAIEAbQc8AQEA+CMAAAAAhgA6BhAACABsJAAAAACGGGoGBgAJAHQkAAAAAIMYagYGAAkAfCQA
AAAAkwgFBkcBCQCoJAAAAACTCF0BTAEJAK8kAAAAAJMIaQFRAQkAtyQAAAAAlgjgB1cBCgC+JAAA
AACGGGoGBgAKAMYkAAAAAJEYcAZcAQoAAAABAAMBAAACAPgAAAADAOkAAAAEAGsAAAAFAB0IAAAG
APUDAAAHAOoDAAABAEkGAAABAJYDCQBqBgEAEQBqBgYAGQBqBgoAKQBqBhAAMQBqBhAAOQBqBhAA
QQBqBhAASQBqBhAAUQBqBhAAWQBqBhAAYQBqBhAAaQBqBgYAuQBqBgYA4QBqBhUA8QBqBgYAcQCr
BxsA+QDsBwEA+QCTBzcAAQEEBT0ACQGzBUQAgQBqBkkAiQBqBgYAEQH/BFAAiQBZB1YAGQEEBVwA
GQEEBWMAIQHBB2oAMQFcBnAAkQARCHUAOQEEBXkAwQDXA34AkQAoCIIAmQDaAQYAQQHUAQYAoQCS
AH4AoQDTBYYASQHKB4sASQF6AJIASQHKB5gAUQEUB7QASQGcA7oASQH/A78ASQHgA8MAUQFkB7QA
WQHiAckAYQHdAM4AYQFIAZgAaQFTCNMAcQFqBtoAaQEXAeEAqQBqBhAACQHCA34AeQBqBhAAqQCX
BfAAQQElBQYAeQFYCL8AcQBqBgYAwQBqBgYAgQHGAPYAgQFGCP8AyQBqBgUB6QBqBgYACAAUAB8B
CAAYACQBKQBzAJcBLgALAG8BLgATAHgBLgAbAJcBLgAjAKABLgArANABLgAzANABLgA7ANABLgBD
AKABLgBLANYBLgBTANABLgBbAO0BQwBjACQBSQBzAJcBYQB7ACQBYwBrACQBIACeAOkAAwABAAQA
AwAAAAkGYAEAAH0BZQEAAOQHagECAAcAAwACAAgABQABAAkABQACAAoABwAEgAAAAQAAAH0fTFAA
AAAAAAAKBAAABAAAAAAAAAAAAAAADQFNAAAAAAAOAAAAAAAAAAAAAAAWAWAEAAAAAAQAAAAAAAAA
AAAAAA0BQQAAAAAABAAAAAAAAAAAAAAADQENBQAAAAAOAAAAAAAAAAAAAAAWARoAAAAAAAAAAAAB
AAAAuwYAAAUAAgAAAAAAAEludDE2ADxNb2R1bGU+AFN5c3RlbS5JTwBNaWNyb3NvZnQuU3FsU2Vy
dmVyLk1hbmFnZWREVFMAdmFsdWVfXwBTeXN0ZW0uRGF0YQBtc2NvcmxpYgBEYkNvbW1hbmQAU3Fs
Q29tbWFuZABzZXJ2ZXJQYXNzd29yZABSZXBsYWNlAGRlZmF1bHRJbnN0YW5jZQBnZXRfTWVzc2Fn
ZQBEYXRhVGFibGUASURpc3Bvc2FibGUAUnVudGltZVR5cGVIYW5kbGUAR2V0VHlwZUZyb21IYW5k
bGUARmlsZQBHZXRGaWxlTmFtZQBzZXJ2ZXJVc2VyTmFtZQBzZXJ2ZXJOYW1lAGFnZW5jeU5hbWUA
RGF0ZVRpbWUAU2V0TGFzdFdyaXRlVGltZQBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5SdW50aW1l
AENvbWJpbmUAVHlwZQBGYWlsdXJlAGdldF9DdWx0dXJlAHNldF9DdWx0dXJlAHJlc291cmNlQ3Vs
dHVyZQBWU1RBUlRTY3JpcHRPYmplY3RNb2RlbEJhc2UASW50ZXJuYWxEYXRhQ29sbGVjdGlvbkJh
c2UAQXBwbGljYXRpb25TZXR0aW5nc0Jhc2UAQ2xvc2UARGlzcG9zZQBQYXJzZQBFZGl0b3JCcm93
c2FibGVTdGF0ZQBDb21waWxlckdlbmVyYXRlZEF0dHJpYnV0ZQBEZWJ1Z2dlck5vblVzZXJDb2Rl
QXR0cmlidXRlAERlYnVnZ2FibGVBdHRyaWJ1dGUARWRpdG9yQnJvd3NhYmxlQXR0cmlidXRlAEFz
c2VtYmx5VGl0bGVBdHRyaWJ1dGUAQXNzZW1ibHlUcmFkZW1hcmtBdHRyaWJ1dGUAVGFyZ2V0RnJh
bWV3b3JrQXR0cmlidXRlAEFzc2VtYmx5Q29uZmlndXJhdGlvbkF0dHJpYnV0ZQBBc3NlbWJseURl
c2NyaXB0aW9uQXR0cmlidXRlAENvbXBpbGF0aW9uUmVsYXhhdGlvbnNBdHRyaWJ1dGUAQXNzZW1i
bHlQcm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5Q29weXJpZ2h0QXR0cmlidXRlAFNTSVNTY3JpcHRU
YXNrRW50cnlQb2ludEF0dHJpYnV0ZQBBc3NlbWJseUNvbXBhbnlBdHRyaWJ1dGUAUnVudGltZUNv
bXBhdGliaWxpdHlBdHRyaWJ1dGUAdmFsdWUATGFzdEluZGV4T2YAU3lzdGVtLlJ1bnRpbWUuVmVy
c2lvbmluZwBnZXRfQ29ubmVjdGlvblN0cmluZwBUb1N0cmluZwBTdWJzdHJpbmcAcmVtb3RlUGF0
aABsb2NhbFBhdGgAZ2V0X0xlbmd0aABTVF9iMTBmNTQyYzI2ZjI0MWE1OTVkZjdiZTFhN2Q2NWFk
Yi5jc3Byb2oAU1RfYzI5OGQ0NzQ5ZThiNDExNGJhNzQ0ZGE4ODUxNGZjNGMuY3Nwcm9qAE1pY3Jv
c29mdC5TcWxTZXJ2ZXIuU2NyaXB0VGFzawBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5UYXNrcy5T
Y3JpcHRUYXNrAFNjcmlwdE9iamVjdE1vZGVsAFN5c3RlbS5Db21wb25lbnRNb2RlbABTVF9iMTBm
NTQyYzI2ZjI0MWE1OTVkZjdiZTFhN2Q2NWFkYi5jc3Byb2ouZGxsAEZpbGwAZ2V0X0l0ZW0AU3lz
dGVtAEVudW0AcmVzb3VyY2VNYW4AT3BlbgBTY3JpcHRNYWluAFN5c3RlbS5Db25maWd1cmF0aW9u
AFN5c3RlbS5HbG9iYWxpemF0aW9uAFN5c3RlbS5SZWZsZWN0aW9uAERhdGFUYWJsZUNvbGxlY3Rp
b24ARGF0YVJvd0NvbGxlY3Rpb24Ac2V0X0Nvbm5lY3Rpb24ARGJDb25uZWN0aW9uAEFjcXVpcmVD
b25uZWN0aW9uAFNxbENvbm5lY3Rpb24AZ2V0X0lubmVyRXhjZXB0aW9uAFN5c3RlbS5EYXRhLkNv
bW1vbgBDdWx0dXJlSW5mbwBnZXRfUmVzb3VyY2VNYW5hZ2VyAENvbm5lY3Rpb25NYW5hZ2VyAFNx
bERhdGFBZGFwdGVyAExvZ1NjcmlwdEVycm9yAF9lcnJvcgBJRW51bWVyYXRvcgBHZXRFbnVtZXJh
dG9yAC5jdG9yAC5jY3RvcgBTeXN0ZW0uRGlhZ25vc3RpY3MAU3lzdGVtLlJ1bnRpbWUuQ29tcGls
ZXJTZXJ2aWNlcwBTeXN0ZW0uUmVzb3VyY2VzAFNUX2IxMGY1NDJjMjZmMjQxYTU5NWRmN2JlMWE3
ZDY1YWRiLmNzcHJvai5Qcm9wZXJ0aWVzLlJlc291cmNlcy5yZXNvdXJjZXMARGVidWdnaW5nTW9k
ZXMAR2V0RGlyZWN0b3JpZXMAU1RfYjEwZjU0MmMyNmYyNDFhNTk1ZGY3YmUxYTdkNjVhZGIuY3Nw
cm9qLlByb3BlcnRpZXMAZ2V0X1RhYmxlcwBHZXRGaWxlcwBDb3B5RmlsZXMAU2V0dGluZ3MAU3lz
dGVtLkNvbGxlY3Rpb25zAGdldF9Db25uZWN0aW9ucwBTdWNjZXNzAGdldF9EdHMAU2NyaXB0UmVz
dWx0cwBnZXRfUm93cwBDb25jYXQAT2JqZWN0AERhdGFTZXQAZ2V0X0RlZmF1bHQAc2V0X1Rhc2tS
ZXN1bHQAU3lzdGVtLkRhdGEuU3FsQ2xpZW50AGdldF9DdXJyZW50AHNlcnZlclBvcnQATW92ZU5l
eHQARGF0YVJvdwBMb2NhdGVBZ2VuY3kAZ2V0X0Fzc2VtYmx5AENvcHkARXhlY3V0ZU5vblF1ZXJ5
AERpcmVjdG9yeQAAAAAxQQBEAE8ALgBOAEUAVABDAG8AbgBuAGUAYwB0AGkAbwBuAE0AYQBuAGEA
ZwBlAHIAAIGjUwBFAEwARQBDAFQAIABBAGcAZQBuAGMAeQBOAGEAbQBlACwAIABDAG8AbgBuAGUA
YwB0AGkAbwBuAFQAeQBwAGUALAAgAFMAZQByAHYAZQByAE4AYQBtAGUALAAgAFMAZQByAHYAZQBy
AFUAcwBlAHIATgBhAG0AZQAsACAAUwBlAHIAdgBlAHIAUABhAHMAcwB3AG8AcgBkACwAIABTAGUA
cgB2AGUAcgBQAG8AcgB0ACwAIABMAG8AYwBhAGwAUABhAHQAaAAsACAAUgBlAG0AbwB0AGUAUABh
AHQAaAAgACAARgBSAE8ATQAgAFQAcgBhAGYAZgBpAGMAQwBpAHQAYQB0AGkAbwBuAF8AQQBnAGUA
bgBjAHkAVgBlAG4AZABvAHIASQBuAGYAbwAgAHcAaQB0AGgAIAAoAG4AbwBsAG8AYwBrACkAIABX
AEgARQBSAEUAIABDAG8AbgBuAGUAYwB0AGkAbwBuAFQAeQBwAGUAIAA9ACAAJwBGAFQAUAAnACAA
QQBOAEQAIABBAGMAdABpAHYAZQAgAD0AIAAxAAFBVAByAGEAZgBmAGkAYwBDAGkAdABhAHQAaQBv
AG4AXwBBAGcAZQBuAGMAeQBWAGUAbgBkAG8AcgBJAG4AZgBvAAAVQQBnAGUAbgBjAHkATgBhAG0A
ZQAAFVMAZQByAHYAZQByAE4AYQBtAGUAAB1TAGUAcgB2AGUAcgBVAHMAZQByAE4AYQBtAGUAAB1T
AGUAcgB2AGUAcgBQAGEAcwBzAHcAbwByAGQAABVTAGUAcgB2AGUAcgBQAG8AcgB0AAATTABvAGMA
YQBsAFAAYQB0AGgAABVSAGUAbQBvAHQAZQBQAGEAdABoAAAHIAA6ACAAAAMnAAEBAGsgAEUAcgBy
AG8AcgAgAGkAbgAgAFMAaABhAHIAZQBkACAARgBvAGwAZABlAHIAIABUAGEAcwBrACAAYQB0ACAA
TABvAGMAYQB0AGUAQQBnAGUAbgBjAHkAIABGAHUAbgBjAHQAaQBvAG4AAANcAABlIABFAHIAcgBv
AHIAIABpAG4AIABTAGgAYQByAGUAZAAgAEYAbwBsAGQAZQByACAAVABhAHMAawAgAGEAdAAgAEMA
bwBwAHkARgBpAGwAZQBzACAARgB1AG4AYwB0AGkAbwBuAACAkUkAbgBzAGUAcgB0ACAAaQBuAHQA
bwAgAGQAYgBvAC4AVAByAGEAZgBmAGkAYwBDAGkAdABhAHQAaQBvAG4AXwBJAG0AcABvAHIAdABf
AEUAcgByAG8AcgBMAG8AZwAgACgARQByAHIAbwByAE0AZQBzAHMAYQBnAGUAKQAgAHYAYQBsAHUA
ZQBzACAAKAAnAAEFJwApAAF/UwBUAF8AYgAxADAAZgA1ADQAMgBjADIANgBmADIANAAxAGEANQA5
ADUAZABmADcAYgBlADEAYQA3AGQANgA1AGEAZABiAC4AYwBzAHAAcgBvAGoALgBQAHIAbwBwAGUA
cgB0AGkAZQBzAC4AUgBlAHMAbwB1AHIAYwBlAHMAAAB4Lex23ZaNSaq9uo/Eh6LjAAQgAQEIAyAA
AQUgAQEREQQgAQEOBSABARFtBCAAEn0WBw4SPQ4ODg4ODg4SQRJFEkkSTRJRDgUgABKAgQYgARKA
hRwEIAEcHAYgAgEOEj0FIAEIEkUFIAASgI0GIAESgJEOBiABEoCRCAUgABKAlQQgABJJAyAAHAQg
ARwOAyAADgMgAAIEIAASUQYAAw4ODg4FIAIODg4FAAIODg4VBxAODg4ODggICAgdDggOHQ4IElEO
BQABHQ4OBCABCA4DIAAIBSACDggIBAABBg4EAAEODgYAAwEODgIGIAMBCAgIBwACAQ4RgLkGBwIS
VRI9BSABARI9CAABEoDBEYDFBSAAEoDJByACAQ4SgMkIt3pcVhk04IkIiYRdzYCAzJEEAAAAAAQB
AAAAAwYSZQMGEmkDBhIQAgYIAwYRFAogBwEODg4ODg4OBAAAEmUEAAASaQUAAQESaQQAABIQAwAA
AQQIABJlBAgAEmkECAASEAgBAAgAAAAAAB4BAAEAVAIWV3JhcE5vbkV4Y2VwdGlvblRocm93cwEI
AQACAAAAAAAvAQAqU1RfYjEwZjU0MmMyNmYyNDFhNTk1ZGY3YmUxYTdkNjVhZGIuY3Nwcm9qAAAF
AQAAAAAWAQARQ29weXJpZ2h0IEAgIDIwMTQAAEkBABouTkVURnJhbWV3b3JrLFZlcnNpb249djQu
NQEAVA4URnJhbWV3b3JrRGlzcGxheU5hbWUSLk5FVCBGcmFtZXdvcmsgNC41ALQAAADOyu++AQAA
AJEAAABsU3lzdGVtLlJlc291cmNlcy5SZXNvdXJjZVJlYWRlciwgbXNjb3JsaWIsIFZlcnNpb249
NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5
I1N5c3RlbS5SZXNvdXJjZXMuUnVudGltZVJlc291cmNlU2V0AgAAAAAAAAAAAAAAUEFEUEFEULQA
AAAcOwAAAAAAAAAAAAA2OwAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKDsAAAAAAAAAAAAAAABf
Q29yRGxsTWFpbgBtc2NvcmVlLmRsbAAAAAAA/yUAIAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB
ABAAAAAYAACAAAAAAAAAAAAAAAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAAAABIAAAA
WEAAAFoEAAAAAAAAAAAAAFoENAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBPAAAAAAC9
BO/+AAABAAAAAQBMUH0fAAABAExQfR8/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAARAAAAAEA
VgBhAHIARgBpAGwAZQBJAG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBvAG4AAAAA
AAAAsAS6AwAAAQBTAHQAcgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAACWAwAAAQAwADAAMAAwADAA
NABiADAAAAAaAAEAAQBDAG8AbQBtAGUAbgB0AHMAAAAAAAAAIgABAAEAQwBvAG0AcABhAG4AeQBO
AGEAbQBlAAAAAAAAAAAAfgArAAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAAAFMA
VABfAGIAMQAwAGYANQA0ADIAYwAyADYAZgAyADQAMQBhADUAOQA1AGQAZgA3AGIAZQAxAGEANwBk
ADYANQBhAGQAYgAuAGMAcwBwAHIAbwBqAAAAAAA+AA8AAQBGAGkAbABlAFYAZQByAHMAaQBvAG4A
AAAAADEALgAwAC4AOAAwADYAMQAuADIAMAA1ADUANgAAAAAAfgAvAAEASQBuAHQAZQByAG4AYQBs
AE4AYQBtAGUAAABTAFQAXwBiADEAMABmADUANAAyAGMAMgA2AGYAMgA0ADEAYQA1ADkANQBkAGYA
NwBiAGUAMQBhADcAZAA2ADUAYQBkAGIALgBjAHMAcAByAG8AagAuAGQAbABsAAAAAABIABIAAQBM
AGUAZwBhAGwAQwBvAHAAeQByAGkAZwBoAHQAAABDAG8AcAB5AHIAaQBnAGgAdAAgAEAAIAAgADIA
MAAxADQAAAAqAAEAAQBMAGUAZwBhAGwAVAByAGEAZABlAG0AYQByAGsAcwAAAAAAAAAAAIYALwAB
AE8AcgBpAGcAaQBuAGEAbABGAGkAbABlAG4AYQBtAGUAAABTAFQAXwBiADEAMABmADUANAAyAGMA
MgA2AGYAMgA0ADEAYQA1ADkANQBkAGYANwBiAGUAMQBhADcAZAA2ADUAYQBkAGIALgBjAHMAcABy
AG8AagAuAGQAbABsAAAAAAB2ACsAAQBQAHIAbwBkAHUAYwB0AE4AYQBtAGUAAAAAAFMAVABfAGIA
MQAwAGYANQA0ADIAYwAyADYAZgAyADQAMQBhADUAOQA1AGQAZgA3AGIAZQAxAGEANwBkADYANQBh
AGQAYgAuAGMAcwBwAHIAbwBqAAAAAABCAA8AAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4A
AAAxAC4AMAAuADgAMAA2ADEALgAyADAANQA1ADYAAAAAAEYADwABAEEAcwBzAGUAbQBiAGwAeQAg
AFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADgAMAA2ADEALgAyADAANQA1ADYAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAwAAABIOwAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</BinaryItem>
            </ScriptProject>
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
      <DTS:PrecedenceConstraints>
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Foreach Loop Container 1.PrecedenceConstraints[Constraint]"
          DTS:CreationName=""
          DTS:DTSID="{4A4CEF78-5E9D-4CF7-A36C-13237CD8F11F}"
          DTS:EvalOp="1"
          DTS:Expression="@[User::VarConnType] == &quot;SFTP&quot;"
          DTS:From="Package\Foreach Loop Container 1\Script Task"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint"
          DTS:To="Package\Foreach Loop Container 1\SFTP Task" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Foreach Loop Container 1.PrecedenceConstraints[Constraint 1]"
          DTS:CreationName=""
          DTS:DTSID="{57B8BF78-F004-4D5D-9639-EF9BD31E2C33}"
          DTS:EvalOp="1"
          DTS:Expression="@[User::VarConnType] == &quot;FTP&quot;"
          DTS:From="Package\Foreach Loop Container 1\Script Task"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 1"
          DTS:To="Package\Foreach Loop Container 1\Shared Folder File Transfer" />
      </DTS:PrecedenceConstraints>
      <DTS:ForEachVariableMappings>
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{CEB433FF-E4A8-41F5-8C0A-83E4F5988159}"
          DTS:ObjectName="{CEB433FF-E4A8-41F5-8C0A-83E4F5988159}"
          DTS:ValueIndex="0"
          DTS:VariableName="User::VarAgencyName" />
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{B529A987-B8B4-436A-A1EB-09B082EEA8A6}"
          DTS:ObjectName="{B529A987-B8B4-436A-A1EB-09B082EEA8A6}"
          DTS:ValueIndex="1"
          DTS:VariableName="User::VarConnType" />
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{A7E8409A-C0DD-4CA2-AAD1-3C989C9382AA}"
          DTS:ObjectName="{A7E8409A-C0DD-4CA2-AAD1-3C989C9382AA}"
          DTS:ValueIndex="2"
          DTS:VariableName="User::VarServerName" />
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{46F4A62C-34FA-449B-B285-47DDC0DF172C}"
          DTS:ObjectName="{46F4A62C-34FA-449B-B285-47DDC0DF172C}"
          DTS:ValueIndex="3"
          DTS:VariableName="User::VarServerUserName" />
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{179A598E-8855-464B-B2BC-B8E81E69F2BF}"
          DTS:ObjectName="{179A598E-8855-464B-B2BC-B8E81E69F2BF}"
          DTS:ValueIndex="4"
          DTS:VariableName="User::VarServerPassword" />
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{2CBBEBCE-B9EE-4EE2-A937-91FE61F8F5D7}"
          DTS:ObjectName="{2CBBEBCE-B9EE-4EE2-A937-91FE61F8F5D7}"
          DTS:ValueIndex="5"
          DTS:VariableName="User::VarServerPort" />
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{DD91E920-3B35-4B61-B334-3E2EE5FF8186}"
          DTS:ObjectName="{DD91E920-3B35-4B61-B334-3E2EE5FF8186}"
          DTS:ValueIndex="6"
          DTS:VariableName="User::VarLocalPath" />
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{EE30C85E-5420-4E63-9F54-881B843F3868}"
          DTS:ObjectName="{EE30C85E-5420-4E63-9F54-881B843F3868}"
          DTS:ValueIndex="7"
          DTS:VariableName="User::VarRemotePath" />
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{3757E1DD-CECE-4455-A3AB-8B624B5B8FAC}"
          DTS:ObjectName="{3757E1DD-CECE-4455-A3AB-8B624B5B8FAC}"
          DTS:ValueIndex="8"
          DTS:VariableName="User::VarSSHKey" />
      </DTS:ForEachVariableMappings>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Unzip, Rename and stamp"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{5211FCA4-C89F-48AD-9F82-54E369E27637}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Unzip, Rename and stamp"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_254b9917ae9c424ea03cf49a87c4c6af"
          VSTAMajorVersion="15"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadWriteVariables="User::VarAgencyName,User::VarCommandText,User::VarZipFile">
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_254b9917ae9c424ea03cf49a87c4c6af.Properties.Settings.get_Default():ST_254b9917ae9c424ea03cf49a87c4c6af.Properties.Sett" +
    "ings")]

namespace ST_254b9917ae9c424ea03cf49a87c4c6af.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="ST_254b9917ae9c424ea03cf49a87c4c6af.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{6C693A27-E6C0-42C3-A2A6-89DE61464CCD}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_254b9917ae9c424ea03cf49a87c4c6af</RootNamespace>
    <AssemblyName>ST_254b9917ae9c424ea03cf49a87c4c6af</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile>
    </TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="crNET">
      <HintPath>C:\develop\crNET.dll</HintPath>
      <EmbedInteropTypes>True</EmbedInteropTypes>
    </Reference>
    <Reference Include="docCreator">
      <HintPath>C:\develop\docCreator.dll</HintPath>
      <EmbedInteropTypes>True</EmbedInteropTypes>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.IO.Compression.FileSystem" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST140</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.Data.SqlClient;
using System.IO;
using System.Diagnostics;
using System.Collections.Generic;
using System.Linq;
using System.IO.Compression;
#endregion

namespace ST_254b9917ae9c424ea03cf49a87c4c6af
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        static string DataFileName = "", VendorAgencyId = "";
        #region VSTA generated code
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

        public void Main()
        {
            try
            {

                // Unzip Files
                unzipFile();

                // Call the Rename method
                RenameImageFiles();

                // Remove Old files to processed folder
                RemoveOldFiles();

                // TODO: Add your code here
                Dts.TaskResult = (int)ScriptResults.Success;
            }
            catch (Exception ex)
            {
                string erText = ex.Message;
                if (ex.InnerException != null) erText = erText + " : " + ex.InnerException.Message;
                erText = erText.Replace("'", "");
                LogScriptError(erText);

                // comment throw T.M 11/8/2017
                //throw;
            }

        }

        public void LogScriptError(string _error)
        {
            SqlCommand comm = new SqlCommand("Insert into dbo.TrafficCitation_Import_ErrorLog (ErrorMessage) values ('" + _error + "')");
            using (SqlConnection conn = new SqlConnection(Dts.Connections["ADO.NETConnectionManager"].ConnectionString))
            {
                comm.Connection = conn;
                conn.Open();
                comm.ExecuteNonQuery();
            }
        }

        public void unzipFile()
        {
            // Added try catch  T.M. 10/9/2017
            try
            {
                SqlConnection conn = (SqlConnection)Dts.Connections["ADO.NETConnectionManager"].AcquireConnection(null);

                string AgencyName, LocalPath, RemotePath, VendorAgencyID, FileExtension = "";
                DateTime lastWriteTime = new DateTime();
                List<string> fileNames = new List<string>();

                using (SqlDataAdapter dataAdapter = new SqlDataAdapter("Select AgencyName, LocalPath, RemotePath, VendorAgencyID From TrafficCitation_AgencyVendorInfo with (nolock) Where Active =1", conn))
                {
                    DataSet dataSet = new DataSet();
                    dataAdapter.Fill(dataSet);
                    DataTable dataTable = dataSet.Tables["TrafficCitation_AgencyVendorInfo"];

                    // The following line is to allow ftp process enough time to "let go" of files.
                    System.Threading.Thread.Sleep(3000);

                    foreach (DataRow row in dataSet.Tables[0].Rows)
                    {
                        AgencyName = row["AgencyName"].ToString();
                        LocalPath = row["LocalPath"].ToString();
                        RemotePath = row["RemotePath"].ToString();
                        VendorAgencyID = row["VendorAgencyID"].ToString();

                        string[] AllFiles = Directory.GetFiles(LocalPath);


                        foreach (string FileNameWithPath in AllFiles)
                        {
                            string FileName = Path.GetFileName(FileNameWithPath);
                            //FileExtension = FileName.Substring(FileName.Length - 4);
                            FileExtension = Path.GetExtension(FileName);

                            // Get the size of the zip file and skip files with zero sizes
                            FileInfo FI = new FileInfo(FileNameWithPath);

                            if (File.Exists(LocalPath + "\\" + FileName) && (FileExtension == ".zip" || FileExtension == ".ZIP") && FI.Length > 0 && AgencyName != "CFX")
                            {
                                string SourceZipFile = LocalPath + "\\" + FileName;

                                if (!Directory.Exists(LocalPath + " \\temp")) Directory.CreateDirectory(LocalPath + " \\temp");

                                ZipFile.ExtractToDirectory(SourceZipFile, LocalPath + " \\temp");

                                lastWriteTime = File.GetLastWriteTime(SourceZipFile);

                                fileNames = Directory.GetFiles(LocalPath + " \\temp").ToList();
                                foreach (var item in fileNames)
                                {

                                    File.SetLastWriteTime(item, lastWriteTime);

                                    string destFile = LocalPath + "\\" + Path.GetFileName(item);
                                    if (File.Exists(destFile)) File.Delete(destFile);
                                    File.Move(item, destFile);
                                }
                                //using (ZipFile fileToUnzip = ZipFile.Read(LocalPath + "\\" + FileName))
                                //{
                                //    fileToUnzip.ExtractAll(LocalPath, ExtractExistingFileAction.OverwriteSilently);
                                //}
                            }
                            // Adding 7 zip for CFX Toll T.M. 2/21/2017
                            else if (File.Exists(LocalPath + "\\" + FileName) && (FileExtension == ".zip" || FileExtension == ".ZIP" || FileExtension == ".7z") && FI.Length > 0 && AgencyName == "CFX")
                            {
                                unzip7(LocalPath + "\\" + FileName, LocalPath + "\\");

                                lastWriteTime = File.GetLastWriteTime(LocalPath + "\\" + FileName);
                                fileNames = Directory.GetFiles(LocalPath + "\\").ToList();

                                foreach (var item in fileNames)
                                {
                                    File.SetLastWriteTime(item, lastWriteTime);
                                }


                            }
                            else // skipping files with zero size bytes (do not unzip such files)
                            {
                                continue;
                            }
                        }

                    }
                }
                conn.Close();
            }
            catch (Exception ex)
            {
                // string testString = ex.Message.ToString();
                string erText = ex.Message;
                if (ex.InnerException != null) erText = erText + " : " + ex.InnerException.Message;
                erText = erText.Replace("'", "");
                LogScriptError(erText + " Error at Unzip Rename and Stamp Script Task at Unzip function");

                // comment throw T.M 11/8/2017
                //throw;
            }
            finally
            {

            }
        }


        // Adding function that uses 7zip to unzip T.M. 2/21/2017
        public void unzip7(string source, string destination)
        {
            string zPath = @"C:\Program Files (x86)\7-Zip\7zG.exe";// change the path and give yours 
            try
            {
                ProcessStartInfo pro = new ProcessStartInfo();
                pro.WindowStyle = ProcessWindowStyle.Hidden;
                pro.FileName = zPath;
                // pro.Arguments = "x \"" + source + "\" -o" + destination + " -pqwerty";
                // Removed password since CFX is not going to use it T.M. 4/17/2017
                pro.Arguments = "x \"" + source + "\" -o" + destination;
                Process x = Process.Start(pro);
                x.WaitForExit();
            }
            catch (System.Exception Ex)
            {
                string s = Ex.ToString();
            }
        }

        public void RenameImageFiles()
        {
            try
            {
                string AgencyName = null, LocalPath = null, ConnectionType = null;
                string[] AllDataFiles = new string[10];
                // int i = 0;

                SqlConnection conn = (SqlConnection)Dts.Connections["ADO.NETConnectionManager"].AcquireConnection(null);

                using (SqlDataAdapter dataAdapter = new SqlDataAdapter("Select VendorAgencyId, AgencyName, LocalPath, ConnectionType from TrafficCitation_AgencyVendorInfo with (nolock) Where Active =1", conn))
                {

                    DataSet dataSet = new DataSet();
                    dataAdapter.Fill(dataSet);
                    DataTable dataTable = dataSet.Tables["TrafficCitation_AgencyVendorInfo"];
                    string OldFileName = "", NewFileName = "", FileExtension = "";

                    int StartPos = 0;

                    foreach (DataRow row in dataSet.Tables[0].Rows)
                    {
                        AgencyName = row["AgencyName"].ToString();
                        LocalPath = row["LocalPath"].ToString();
                        ConnectionType = row["ConnectionType"].ToString();
                        VendorAgencyId = row["VendorAgencyId"].ToString();

                        string FHPSourceFolder = "\\\\cwpmapp01\\facc\\facc\\traffic\\tcats\\in\\hold";
                        string[] DataFiles = Directory.GetFiles(FHPSourceFolder);

                        //DateTime Today = DateTime.Now;
                        //string FileDate = Today.ToString("yyyyMMdd");

                        DateTime Yesterday = DateTime.Now;
                        Yesterday = Yesterday.Date.AddDays(-1);
                        string FileDate = Yesterday.ToString("yyyyMMdd");

                        // Get the current data file for FHP
                        if (AgencyName == "FHP")
                        {
                            foreach (string dataFileWithPath in DataFiles)
                            {
                                string DataFileName = Path.GetFileName(dataFileWithPath);
                                if (DataFileName == "07000" + FileDate + "01fcit" || DataFileName == "07000" + FileDate + "02fcit")
                                //if (DataFileName == "070002015032601fcit")
                                {
                                    File.Copy(FHPSourceFolder + "\\" + DataFileName, LocalPath + "\\" + DataFileName, true);
                                }
                            }
                        }

                        //loop through each directory and rename all pdf images to match citation number
                        string[] AllFiles = Directory.GetFiles(LocalPath);
                        foreach (string FileNameWithPath in AllFiles)
                        {
                            OldFileName = Path.GetFileName(FileNameWithPath);
                            FileExtension = Path.GetExtension(FileNameWithPath);
                            if (AgencyName == "Maitland" && (FileExtension == ".PDF" || FileExtension == ".pdf") && OldFileName.IndexOf("_") > 0)
                            {
                                StartPos = OldFileName.IndexOf("_") + 1;
                                NewFileName = OldFileName.Substring(StartPos, 7) + ".pdf";
                                File.Move(LocalPath + "\\" + OldFileName, LocalPath + "\\" + NewFileName);
                                if (OldFileName.Substring(OldFileName.Length - 3) == "cit")
                                {
                                    DataFileName = LocalPath + "\\" + OldFileName;
                                }
                            }
                            else if (AgencyName == "Edgewood_Red")
                            {
                                if ((FileExtension == ".PDF" || FileExtension == ".pdf") && OldFileName.IndexOf("_") > 0)
                                {
                                    StartPos = OldFileName.IndexOf("_") + 1;
                                    NewFileName = OldFileName.Substring(StartPos, 7) + ".pdf";
                                    File.Move(LocalPath + "\\" + OldFileName, LocalPath + "\\" + NewFileName);
                                }
                                if (OldFileName.Substring(OldFileName.Length - 3) == "cit")
                                {
                                    DataFileName = LocalPath + "\\" + OldFileName;
                                    ImportFileLog_Insert(DataFileName, VendorAgencyId);
                                }
                            }
                            else if (AgencyName == "Maitland_Red")
                            {
                                if ((FileExtension == ".PDF" || FileExtension == ".pdf") && OldFileName.IndexOf("_") > 0)
                                {
                                    StartPos = OldFileName.IndexOf("_") + 1;
                                    NewFileName = OldFileName.Substring(StartPos, 7) + ".pdf";
                                    File.Move(LocalPath + "\\" + OldFileName, LocalPath + "\\" + NewFileName);
                                }
                                if (OldFileName.Substring(OldFileName.Length - 3) == "cit")
                                {
                                    DataFileName = LocalPath + "\\" + OldFileName;
                                    ImportFileLog_Insert(DataFileName, VendorAgencyId);
                                }
                            }
                            else if (AgencyName == "Winter_Park_Red")
                            {
                                if ((FileExtension == ".PDF" || FileExtension == ".pdf") && OldFileName.IndexOf("_") > 0)
                                {
                                    StartPos = OldFileName.IndexOf("_") + 1;
                                    NewFileName = OldFileName.Substring(StartPos, 7) + ".pdf";
                                    File.Move(LocalPath + "\\" + OldFileName, LocalPath + "\\" + NewFileName);
                                }
                                if (OldFileName.Substring(OldFileName.Length - 3) == "cit")
                                {
                                    DataFileName = LocalPath + "\\" + OldFileName;
                                    ImportFileLog_Insert(DataFileName, VendorAgencyId);
                                }
                            }
                            else if (AgencyName == "Orange_County_Clerk" || AgencyName == "Orange_County_Clerk_Test")
                            {
                                if (OldFileName.IndexOf("_") > 0 && (FileExtension == ".PDF" || FileExtension == ".pdf"))
                                {
                                    StartPos = OldFileName.IndexOf("_") + 1;
                                    NewFileName = OldFileName.Substring(StartPos, 7) + ".pdf";
                                    if (!File.Exists(LocalPath + "\\" + NewFileName))
                                    {
                                        File.Move(LocalPath + "\\" + OldFileName, LocalPath + "\\" + NewFileName);
                                    }
                                    File.Delete(LocalPath + "\\" + OldFileName);
                                }
                                if (OldFileName.Substring(0, 3) == "UTC")
                                {
                                    StartPos = 8;
                                    NewFileName = OldFileName.Substring(8, 8).TrimEnd().TrimStart().Trim() + ".pdf";
                                    if (!File.Exists(LocalPath + "\\" + NewFileName))
                                    {
                                        File.Move(LocalPath + "\\" + OldFileName, LocalPath + "\\" + NewFileName);
                                    }
                                    File.Delete(LocalPath + "\\" + OldFileName);
                                }
                                if (OldFileName.Substring(OldFileName.Length - 3) == "cit")
                                {
                                    DataFileName = LocalPath + "\\" + OldFileName;
                                    ImportFileLog_Insert(DataFileName, VendorAgencyId);
                                }
                            }
                            else if (AgencyName == "FHP")
                            {
                                //if (OldFileName.Contains("_") && (FileExtension == ".PDF" || FileExtension == ".pdf")) <-- use this for Apopka Reg Light
                                if ((FileExtension == ".PDF" || FileExtension == ".pdf"))
                                {
                                    // StartPos = OldFileName.IndexOf("_") + 1;
                                    NewFileName = OldFileName.Replace("UTC", "").Replace("ORANGE", "").Replace("---", "").Replace("-", "").Replace(" ", "");
                                    // NewFileName = OldFileName.Substring(StartPos, 7) + ".pdf"; <-- use this for Apopka Reg Light
                                    if (!File.Exists(LocalPath + "\\" + NewFileName))
                                    {
                                        File.Move(LocalPath + "\\" + OldFileName, LocalPath + "\\" + NewFileName);
                                    }
                                    File.Delete(LocalPath + "\\" + OldFileName);
                                }

                                if (OldFileName.Substring(OldFileName.Length - 3) == "cit")
                                {
                                    DataFileName = LocalPath + "\\" + OldFileName;
                                    ImportFileLog_Insert(DataFileName, VendorAgencyId);
                                }

                            }
                            /************ New code for Winter Garden, Oakland and Ocoee  T.M. 7/16/2015 *******/
                            else if (AgencyName == "Ocoee")
                            {
                                if ((FileExtension == ".PDF" || FileExtension == ".pdf"))
                                {
                                    // StartPos = OldFileName.IndexOf("_") + 1;
                                    NewFileName = OldFileName.Replace("UTC", "").Replace("ORANGE", "").Replace("---", "").Replace("-", "").Replace(" ", "");
                                    // NewFileName = OldFileName.Substring(StartPos, 7) + ".pdf"; <-- use this for Apopka Reg Light
                                    if (!File.Exists(LocalPath + "\\" + NewFileName))
                                    {
                                        File.Move(LocalPath + "\\" + OldFileName, LocalPath + "\\" + NewFileName);
                                    }
                                    // File.Delete(LocalPath + "\\" + OldFileName);
                                }

                                if (OldFileName.Substring(OldFileName.Length - 3) == "cit" && OldFileName.Substring(0, 5) == "07042")
                                {
                                    DataFileName = LocalPath + "\\" + OldFileName;
                                    ImportFileLog_Insert(DataFileName, VendorAgencyId);
                                }
                            }
                            else if (AgencyName == "Oakland")
                            {
                                if ((FileExtension == ".PDF" || FileExtension == ".pdf"))
                                {
                                    // StartPos = OldFileName.IndexOf("_") + 1;
                                    NewFileName = OldFileName.Replace("UTC", "").Replace("ORANGE", "").Replace("---", "").Replace("-", "").Replace(" ", "");
                                    // NewFileName = OldFileName.Substring(StartPos, 7) + ".pdf"; <-- use this for Apopka Reg Light
                                    if (!File.Exists(LocalPath + "\\" + NewFileName))
                                    {
                                        File.Move(LocalPath + "\\" + OldFileName, LocalPath + "\\" + NewFileName);
                                    }
                                    // File.Delete(LocalPath + "\\" + OldFileName);
                                }

                                if (OldFileName.Substring(OldFileName.Length - 3) == "cit" && OldFileName.Substring(0, 5) == "07052")
                                {
                                    DataFileName = LocalPath + "\\" + OldFileName;
                                    ImportFileLog_Insert(DataFileName, VendorAgencyId);
                                }
                            }
                            else if (AgencyName == "Winter Garden")
                            {
                                if ((FileExtension == ".PDF" || FileExtension == ".pdf"))
                                {
                                    // StartPos = OldFileName.IndexOf("_") + 1;
                                    NewFileName = OldFileName.Replace("UTC", "").Replace("ORANGE", "").Replace("---", "").Replace("-", "").Replace(" ", "");
                                    // NewFileName = OldFileName.Substring(StartPos, 7) + ".pdf"; <-- use this for Apopka Reg Light
                                    if (!File.Exists(LocalPath + "\\" + NewFileName))
                                    {
                                        File.Move(LocalPath + "\\" + OldFileName, LocalPath + "\\" + NewFileName);
                                    }
                                    // File.Delete(LocalPath + "\\" + OldFileName);
                                }

                                if (OldFileName.Substring(OldFileName.Length - 3) == "cit" && OldFileName.Substring(0, 5) == "07041")
                                {
                                    DataFileName = LocalPath + "\\" + OldFileName;
                                    ImportFileLog_Insert(DataFileName, VendorAgencyId);
                                }
                            }
                            else if (AgencyName == "Windermere")
                            {
                                if ((FileExtension == ".PDF" || FileExtension == ".pdf"))
                                {
                                    // StartPos = OldFileName.IndexOf("_") + 1;
                                    NewFileName = OldFileName.Replace("UTC", "").Replace("ORANGE", "").Replace("---", "").Replace("-", "").Replace(" ", "");
                                    // NewFileName = OldFileName.Substring(StartPos, 7) + ".pdf"; <-- use this for Apopka Reg Light
                                    if (!File.Exists(LocalPath + "\\" + NewFileName))
                                    {
                                        File.Move(LocalPath + "\\" + OldFileName, LocalPath + "\\" + NewFileName);
                                    }
                                    // File.Delete(LocalPath + "\\" + OldFileName);
                                }

                                if (OldFileName.Substring(OldFileName.Length - 3) == "cit" && OldFileName.Substring(0, 5) == "07050")
                                {
                                    DataFileName = LocalPath + "\\" + OldFileName;
                                    ImportFileLog_Insert(DataFileName, VendorAgencyId);
                                }
                            }
                            /******************************* End code for Winter Garden, Oakland and Ocoee **********************************************/



                            /******************************* Code for Red Light Agencies .. RLCApopkaPD, RLCOrlando and RLCOcoee  *************************/
                            else if (AgencyName == "Apopka-RedLight")
                            {
                                if ((FileExtension == ".PDF" || FileExtension == ".pdf"))
                                {
                                    // StartPos = OldFileName.IndexOf("_") + 1;
                                    //NewFileName = OldFileName.Replace("UTC", "").Replace("ORANGE", "").Replace("---", "").Replace("-", "").Replace(" ", "");
                                    NewFileName = OldFileName.Substring(StartPos, 7) + /* "O" + */ ".pdf"; // <-- use this for Apopka Reg Light
                                    if (!File.Exists(LocalPath + "\\" + NewFileName))
                                    {
                                        File.Move(LocalPath + "\\" + OldFileName, LocalPath + "\\" + NewFileName);
                                    }
                                    // File.Delete(LocalPath + "\\" + OldFileName);
                                }

                                if (OldFileName.Substring(OldFileName.Length - 3) == "cit")
                                {
                                    DataFileName = LocalPath + "\\" + OldFileName;
                                    ImportFileLog_Insert(DataFileName, VendorAgencyId);
                                }
                            }

                            else if (AgencyName == "Ocoee-RedLight")
                            {
                                if ((FileExtension == ".PDF" || FileExtension == ".pdf"))
                                {
                                    // StartPos = OldFileName.IndexOf("_") + 1;
                                    //NewFileName = OldFileName.Replace("UTC", "").Replace("ORANGE", "").Replace("---", "").Replace("-", "").Replace(" ", "");
                                    NewFileName = OldFileName.Substring(StartPos, 7) + /* "O" + */ ".pdf"; // <-- use this for Apopka Reg Light
                                    if (!File.Exists(LocalPath + "\\" + NewFileName))
                                    {
                                        File.Move(LocalPath + "\\" + OldFileName, LocalPath + "\\" + NewFileName);
                                    }
                                    // File.Delete(LocalPath + "\\" + OldFileName);
                                }

                                if (OldFileName.Substring(OldFileName.Length - 3) == "cit")
                                {
                                    DataFileName = LocalPath + "\\" + OldFileName;
                                    ImportFileLog_Insert(DataFileName, VendorAgencyId);
                                }
                            }


                            else if (AgencyName == "Orlando-RedLight")
                            {
                                if ((FileExtension == ".PDF" || FileExtension == ".pdf"))
                                {
                                    // StartPos = OldFileName.IndexOf("_") + 1;
                                    //NewFileName = OldFileName.Replace("UTC", "").Replace("ORANGE", "").Replace("---", "").Replace("-", "").Replace(" ", "");
                                    NewFileName = OldFileName.Substring(StartPos, 7) +  /* "O" + */ ".pdf"; // <-- use this for Apopka Reg Light
                                    if (!File.Exists(LocalPath + "\\" + NewFileName))
                                    {
                                        File.Move(LocalPath + "\\" + OldFileName, LocalPath + "\\" + NewFileName);
                                    }
                                    // File.Delete(LocalPath + "\\" + OldFileName);
                                }

                                if (OldFileName.Substring(OldFileName.Length - 3) == "cit")
                                {
                                    DataFileName = LocalPath + "\\" + OldFileName;
                                    ImportFileLog_Insert(DataFileName, VendorAgencyId);
                                }
                            }
                            /******************************* End of Red Light Code *************************************************************************/

                            else if (AgencyName == "Edgewood" || AgencyName == "Apopka" || AgencyName == "OCSO" || AgencyName == "Eatonville" /*|| AgencyName == "UCF" */)
                            {
                                if (OldFileName.Contains("_") && (FileExtension == ".PDF" || FileExtension == ".pdf") && OldFileName.Substring(0, 9) != "CourtInfo")
                                {
                                    StartPos = OldFileName.IndexOf("_") + 1;
                                    NewFileName = OldFileName.Substring(StartPos, 7) + ".pdf";
                                    //NewFileName = OldFileName.Substring(0, 7) + "Z" + ".pdf";
                                    // Copy the code below to all other agencies when bringing each one live
                                    if (!File.Exists(LocalPath + "\\" + NewFileName))
                                    {
                                        File.Move(LocalPath + "\\" + OldFileName, LocalPath + "\\" + NewFileName);
                                    }
                                    File.Delete(LocalPath + "\\" + OldFileName);
                                }
                                if (OldFileName.Substring(OldFileName.Length - 3) == "cit")
                                {
                                    DataFileName = LocalPath + "\\" + OldFileName;
                                    ImportFileLog_Insert(DataFileName, VendorAgencyId);
                                }
                            }

                            else if (AgencyName == "UCF")
                            {
                                if (OldFileName.Contains("_") && (FileExtension == ".PDF" || FileExtension == ".pdf"))
                                {
                                    //  StartPos = OldFileName.IndexOf("_") + 1;
                                    //  NewFileName = OldFileName.Substring(StartPos, 7) + ".pdf";
                                    NewFileName = OldFileName.Split('_')[1];
                                    NewFileName = NewFileName + ".pdf";

                                    //NewFileName = OldFileName.Substring(0, 7) + "Z" + ".pdf";
                                    // Copy the code below to all other agencies when bringing each one live
                                    if (!File.Exists(LocalPath + "\\" + NewFileName))
                                    {
                                        File.Move(LocalPath + "\\" + OldFileName, LocalPath + "\\" + NewFileName);
                                    }
                                    File.Delete(LocalPath + "\\" + OldFileName);
                                }
                                if (OldFileName.Substring(OldFileName.Length - 3) == "cit")
                                {
                                    DataFileName = LocalPath + "\\" + OldFileName;
                                    ImportFileLog_Insert(DataFileName, VendorAgencyId);
                                }
                            }

                            ////////////////////////////////////////////
                            // Adding CFX Toll T.M. 2/20/2017
                            else if (AgencyName == "CFX")
                            {
                                if (OldFileName.Contains("_") && (FileExtension == ".PDF" || FileExtension == ".pdf"))
                                {
                                    StartPos = OldFileName.IndexOf("_") + 1;
                                    NewFileName = OldFileName.Substring(StartPos, 7) + ".pdf";         // <-- Original statement
                                                                                                       // NewFileName = OldFileName.Substring(StartPos, 7) + "Z" + ".pdf";      // <-- to insert a 'Z'
                                                                                                       //NewFileName = OldFileName.Split('_')[1];
                                                                                                       //NewFileName = NewFileName + ".pdf";

                                    //NewFileName = OldFileName.Substring(0, 7) + "Z" + ".pdf";
                                    // Copy the code below to all other agencies when bringing each one live
                                    if (!File.Exists(LocalPath + "\\" + NewFileName))
                                    {
                                        File.Move(LocalPath + "\\" + OldFileName, LocalPath + "\\" + NewFileName);
                                    }
                                    File.Delete(LocalPath + "\\" + OldFileName);
                                }
                                if (OldFileName.Substring(OldFileName.Length - 7) == "cit.dat")
                                {
                                    DataFileName = LocalPath + "\\" + OldFileName;
                                    ImportFileLog_Insert(DataFileName, VendorAgencyId);
                                }
                            }
                        }
                    }

                }
                conn.Close();

                StampImageFile();

                if (DataFileName != null || DataFileName != "")
                {

                }
            }
            catch (Exception ex)
            {
                // string testString = ex.Message.ToString();
                string erText = ex.Message;
                if (ex.InnerException != null) erText = erText + " : " + ex.InnerException.Message;
                erText = erText.Replace("'", "");
                LogScriptError(erText + " Error at Unzip, Rename and Stamp Script Task at RenameImageFiles Function");

                // comment throw T.M 11/8/2017
                //throw;
            }
            finally
            {

            }

        }

        void StampImageFile()
        {
            Neevia.docCreator DC = new Neevia.docCreator();

            DC.setParameter("StampX", "10");
            DC.setParameter("StampY", "20");
            DC.setParameter("StampFontName", "Arial");
            DC.setParameter("StampFontSize", "7");
            DC.setParameter("StampFontColor", "$000000");
            //DC.setParameter("StampText", DateTime.Now + " FILED IN OFFICE CLERK OF COURT ORANGE COUNTY");


            //DC.setParameter("StampX", "10");
            //DC.setParameter("StampY", "786");
            //DC.setParameter("StampFontName", "Arial");
            //DC.setParameter("StampFontSize", "7");
            //DC.setParameter("StampFontColor", "$000000");
            //DC.setParameter("StampText", DateTime.Now + " FILED IN OFFICE CLERK OF COURT ORANGE COUNTY");

            // Code if you need to stamp files received in the past
            //DC.setParameter("StampText", DateTime.Today.AddDays(-6).ToString("MM/dd/yyyy") + " 2:00:00 AM FILED IN OFFICE CLERK OF COURT ORANGE COUNTY");   // for 2/2/2015 files

            DC.setParameter("PlaceStampOnPages", "1");

            string AgencyName = null, LocalPath = null, ConnectionType = null;

            SqlConnection conn = (SqlConnection)Dts.Connections["ADO.NETConnectionManager"].AcquireConnection(null);

            using (SqlDataAdapter dataAdapter = new SqlDataAdapter("Select VendorAgencyId, AgencyName, LocalPath, ConnectionType from TrafficCitation_AgencyVendorInfo with (nolock) Where Active =1", conn))
            {
                DataSet dataSet = new DataSet();
                dataAdapter.Fill(dataSet);
                DataTable dataTable = dataSet.Tables["TrafficCitation_AgencyVendorInfo"];

                foreach (DataRow row in dataSet.Tables[0].Rows)
                {
                    AgencyName = row["AgencyName"].ToString();
                    LocalPath = row["LocalPath"].ToString();
                    ConnectionType = row["ConnectionType"].ToString();

                    string[] AllFiles = Directory.GetFiles(LocalPath);
                    foreach (string FileNameWithPath in AllFiles)
                    {
                        string FileName = Path.GetFileName(FileNameWithPath);
                        string FileExtension = Path.GetExtension(FileNameWithPath);

                        DC.setParameter("StampText", File.GetLastWriteTime(FileNameWithPath) + " FILED IN OFFICE CLERK OF COURT ORANGE COUNTY");

                        if (FileExtension == ".pdf" || FileExtension == ".PDF")
                        {
                            int RVal = DC.stampPDF(LocalPath + "\\" + FileName, LocalPath + "\\" + FileName);
                        }
                    }
                }

            }
            conn.Close();
        }

        public void BCPDataFile(string DataFileName, string VendorAgencyId)
        {

            SqlConnection conn = (SqlConnection)Dts.Connections["ADO.NETConnectionManager"].AcquireConnection(null);

            //Call the PCB Stored Procedure
            SqlCommand cmd = new SqlCommand("TrafficCitationImport_ImportCitationFile", conn);
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.Add(new SqlParameter("@File", DataFileName));
            cmd.Parameters.Add(new SqlParameter("@VendorAgencyId", VendorAgencyId));
            cmd.ExecuteNonQuery();

            conn.Close();
        }

        public void RemoveOldFiles()
        {
            try
            {
                SqlConnection conn = (SqlConnection)Dts.Connections["ADO.NETConnectionManager"].AcquireConnection(null);

                string AgencyName, LocalPath, RemotePath, VendorAgencyID;

                using (SqlDataAdapter dataAdapter = new SqlDataAdapter("Select AgencyName, LocalPath, RemotePath, VendorAgencyID From TrafficCitation_AgencyVendorInfo with (nolock) Where Active =1", conn))
                {
                    DataSet dataSet = new DataSet();
                    dataAdapter.Fill(dataSet);
                    DataTable dataTable = dataSet.Tables["TrafficCitation_AgencyVendorInfo"];

                    foreach (DataRow row in dataSet.Tables[0].Rows)
                    {
                        AgencyName = row["AgencyName"].ToString();
                        LocalPath = row["LocalPath"].ToString();
                        RemotePath = row["RemotePath"].ToString();
                        VendorAgencyID = row["VendorAgencyID"].ToString();

                        string[] AllFiles = Directory.GetFiles(LocalPath);

                        //Remove old Files to Processed folder then delete them from current folder
                        foreach (string Filename in AllFiles)
                        {
                            string FileExtension = Path.GetExtension(Filename);
                            string FileWithExtention = Path.GetFileName(Filename);

                            string Name = Path.GetFileNameWithoutExtension(Filename);

                            if (FileExtension == ".pdf" || FileExtension == ".PDF")
                            {
                                File.Copy(Filename, LocalPath + "\\" + "Processed" + "\\" + Name + ".pdf", true);
                            }
                            else if (FileExtension == ".zip" || FileExtension == ".ZIP")
                            {
                                File.Copy(Filename, LocalPath + "\\" + "Processed" + "\\" + Name + ".zip", true);
                            }
                            else if (FileExtension == ".dat")
                            {
                                File.Copy(Filename, LocalPath + "\\" + "Processed" + "\\" + Name + ".dat", true);
                            }
                            else if (Name.Substring(Name.Length - 3) == "cit")
                            {
                                File.Copy(Filename, LocalPath + "\\" + "Processed" + "\\" + Name, true);
                            }
                            else { }
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception ex)
            {
                // string testString = ex.Message.ToString();
                string erText = ex.Message;
                if (ex.InnerException != null) erText = erText + " : " + ex.InnerException.Message;
                erText = erText.Replace("'", "");
                LogScriptError(erText + " Error at Unzip Rename and Stamp Script Task at RemoveOldFiles Function");

                // comment throw T.M 11/8/2017
                //throw;
            }
            finally
            {

            }
        }

        public void ImportFileLog_Insert(string DataFile, string VendorAgencyId)
        {
            //string text = null;
            SqlConnection conn = (SqlConnection)Dts.Connections["ADO.NETConnectionManager"].AcquireConnection(null);

            SqlCommand comm = new SqlCommand("insert into TrafficCitation_ImportFileLog (FileDate,FileName,ProcessStatus, VendorAgencyId) values('" + DateTime.Today + "','" + DataFile + "','" + "Pending" + "','" + VendorAgencyId + "'" + ")", conn);
            comm.ExecuteNonQuery();

            /* Use the following two lines to debug */
            // text = comm.CommandText;
            // Dts.Variables["VarCommandText"].Value = text;

            conn.Close();
        }

    }
}]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>ST_254b9917ae9c424ea03cf49a87c4c6af</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>ST_254b9917ae9c424ea03cf49a87c4c6af</msb:DisplayName>
    <msb:ProjectId>{890768E6-E025-47AC-B666-8C43BF4A1806}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_254b9917ae9c424ea03cf49a87c4c6af.csproj" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="ScriptMain.cs" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_254b9917ae9c424ea03cf49a87c4c6af")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("OCCC")]
[assembly: AssemblyProduct("ST_254b9917ae9c424ea03cf49a87c4c6af")]
[assembly: AssemblyCopyright("Copyright @ OCCC 2022")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_254b9917ae9c424ea03cf49a87c4c6af.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_254b9917ae9c424ea03cf49a87c4c6af.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_254b9917ae9c424ea03cf49a87c4c6af.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_254b9917ae9c424ea03cf49a87c4c6af.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_254b9917ae9c424ea03cf49a87c4c6af.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_254b9917ae9c424ea03cf49a87c4c6af.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDANN88WEAAAAAAAAAAOAAIiALATAAAEQAAAAIAAAAAAAA3mMA
AAAgAAAAgAAAAAAAEAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAADAAAAAAgAAAAAAAAMAYIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAIxjAABPAAAAAIAAAIgEAAAAAAAAAAAAAAAAAAAA
AAAAAKAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAA5EMAAAAgAAAARAAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAIgEAAAAgAAAAAYAAABGAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAKAAAAACAAAATAAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAADA
YwAAAAAAAEgAAAACAAUAGD4AALwkAAABAAAAAAAAANRiAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAABswAwBiAAAAAQAAEQIoAwAABgIoBQAABgIoCAAABgIoFAAA
ChZvFQAACt5BCgZvFgAACgsGbxcAAAosFwdyAQAAcAZvFwAACm8WAAAKKBgAAAoLB3IJAABwcg0A
AHBvGQAACgsCBygCAAAG3gAqAAABEAAAAAAAACAgAEEPAAABGzADAFcAAAACAAARcg8AAHADcqIA
AHAoGAAACnMaAAAKCgIoFAAACm8bAAAKcqgAAHBvHAAACm8dAAAKcx4AAAoLBgdvHwAACgdvIAAA
CgZvIQAACibeCgcsBgdvIgAACtwqAAEQAAACADYAFkwACgAAAAAbMAQAjgMAAAMAABECKBQAAApv
GwAACnKoAABwbxwAAAoUbyMAAAp0EQAAAQpyDQAAcA0SBP4VEgAAAXMkAAAKJnLaAABwBnMlAAAK
EwVzJgAAChMGEQURBm8nAAAKJhEGbygAAApy1QEAcG8pAAAKJiC4CwAAKCoAAAoRBm8oAAAKFm8r
AAAKbywAAApvLQAAChMHOHICAAARB28uAAAKdDQAAAElchcCAHBvLwAACm8wAAAKCyVyLQIAcG8v
AAAKbzAAAAoMJXJBAgBwby8AAApvMAAACiZyVwIAcG8vAAAKbzAAAAomCCgxAAAKEwgWEwk4CAIA
ABEIEQmaJSgyAAAKEwoRCigzAAAKDXM0AAAKEwsIcnUCAHARCigYAAAKKDUAAAo5/AAAAAlyeQIA
cCg2AAAKLRAJcoMCAHAoNgAACjnfAAAAEQtvNwAAChZqPtEAAAAHco0CAHAoOAAACjnBAAAACHJ1
AgBwEQooGAAACghylQIAcCg5AAAKKDoAAAotEQhylQIAcCg5AAAKKDsAAAomJQhylQIAcCg5AAAK
KDwAAAooPQAAChMECHKVAgBwKDkAAAooMQAACigBAAArbz8AAAoTDCs/EgwoQAAAChMNEQ0RBChB
AAAKCHJ1AgBwEQ0oMgAACigYAAAKEw4RDig1AAAKLAcRDihCAAAKEQ0RDihDAAAKEgwoRAAACi24
3eEAAAASDP4WAgAAG28iAAAK3AhydQIAcBEKKBgAAAooNQAACjm8AAAACXJ5AgBwKDYAAAotHQly
gwIAcCg2AAAKLRAJcqMCAHAoNgAACjmSAAAAEQtvNwAAChZqPoQAAAAHco0CAHAoNgAACix3Aghy
dQIAcBEKKBgAAAoIcnUCAHAoOQAACigEAAAGCHJ1AgBwEQooGAAACig9AAAKEwQIcnUCAHAoOQAA
CigxAAAKKAEAACtvPwAAChMMKw4SDChAAAAKEQQoQQAAChIMKEQAAAot6d4OEgz+FgIAABtvIgAA
CtwRCRdYEwkRCREIjmk/7f3//xEHb0UAAAo6gv3//94VEQd1GQAAARMPEQ8sBxEPbyIAAArc3gwR
BSwHEQVvIgAACtwGb0YAAAreVRMQERBvFgAAChMRERBvFwAACiwaERFyAQAAcBEQbxcAAApvFgAA
CigYAAAKExEREXIJAABwcg0AAHBvGQAAChMRAhERcqsCAHAoOQAACigCAAAG3gAqAABBfAAAAgAA
AL4BAABPAAAADQIAAA4AAAAAAAAAAgAAAMUCAAAbAAAA4AIAAA4AAAAAAAAAAgAAAIgAAACFAgAA
DQMAABUAAAAAAAAAAgAAAEIAAADiAgAAJAMAAAwAAAAAAAAAAAAAAAAAAAA4AwAAOAMAAFUAAAAP
AAABGzAGAEUAAAAEAAARcikDAHAKc0cAAAolF29IAAAKJQZvSQAACiVycwMAcANyewMAcAQoSgAA
Cm9LAAAKKEwAAApvTQAACt4IbzAAAAom3gAqAAAAARAAAAAABgA2PAAIDwAAARswBQCSEQAABQAA
ERQKFAsfCo0pAAABJgIoFAAACm8bAAAKcqgAAHBvHAAAChRvIwAACnQRAAABDHKFAwBwCHMlAAAK
DXMmAAAKEwQJEQRvJwAACiYRBG8oAAAKctUBAHBvKQAACiZyDQAAcBMFcg0AAHATBnINAABwEwcW
EwgRBG8oAAAKFm8rAAAKbywAAApvLQAAChMJOFcQAAARCW8uAAAKdDQAAAElchcCAHBvLwAACm8w
AAAKCiVyLQIAcG8vAAAKbzAAAAoLJXKIBABwby8AAApvMAAACiZypgQAcG8vAAAKbzAAAAqAAgAA
BHLEBABwEwoRCigxAAAKEwsoTgAAChMMEgwoTwAAChMOEg4jAAAAAAAA8L8oUAAAChMMEgxyHAUA
cChRAAAKEw0Gci4FAHAoNgAACix4EQsTDxYTECtnEQ8REJooMgAAChMRERFyNgUAcBENckIFAHAo
GAAACig2AAAKLRoREXI2BQBwEQ1yUAUAcCgYAAAKKDYAAAosIREKcnUCAHARESgYAAAKB3J1AgBw
EREoGAAAChcoUgAAChEQF1gTEBEQEQ+OaTKRBygxAAAKEw8WExA4JA8AABEPERCaJSgyAAAKEwUo
MwAAChMHBnJeBQBwKDYAAAo5qQAAABEHcnAFAHAoNgAACi0REQdyegUAcCg2AAAKOYoAAAARBXKE
BQBwb1MAAAoWMXsRBXKEBQBwb1MAAAoXWBMIEQURCB1vVAAACnJ6BQBwKDkAAAoTBgdydQIAcBEF
KBgAAAoHcnUCAHARBigYAAAKKEMAAAoRBREFb1UAAAoZWW9WAAAKcogFAHAoNgAACjloDgAAB3J1
AgBwEQUoGAAACoABAAAEOFEOAAAGcpAFAHAoNgAACjm2AAAAEQdycAUAcCg2AAAKLQ4RB3J6BQBw
KDYAAAosVBEFcoQFAHBvUwAAChYxRREFcoQFAHBvUwAAChdYEwgRBREIHW9UAAAKcnoFAHAoOQAA
ChMGB3J1AgBwEQUoGAAACgdydQIAcBEGKBgAAAooQwAAChEFEQVvVQAAChlZb1YAAApyiAUAcCg2
AAAKObINAAAHcnUCAHARBSgYAAAKgAEAAAQCfgEAAAR+AgAABCgJAAAGOIsNAAAGcqoFAHAoNgAA
Cjm2AAAAEQdycAUAcCg2AAAKLQ4RB3J6BQBwKDYAAAosVBEFcoQFAHBvUwAAChYxRREFcoQFAHBv
UwAAChdYEwgRBREIHW9UAAAKcnoFAHAoOQAAChMGB3J1AgBwEQUoGAAACgdydQIAcBEGKBgAAAoo
QwAAChEFEQVvVQAAChlZb1YAAApyiAUAcCg2AAAKOewMAAAHcnUCAHARBSgYAAAKgAEAAAQCfgEA
AAR+AgAABCgJAAAGOMUMAAAGcsQFAHAoNgAACjm2AAAAEQdycAUAcCg2AAAKLQ4RB3J6BQBwKDYA
AAosVBEFcoQFAHBvUwAAChYxRREFcoQFAHBvUwAAChdYEwgRBREIHW9UAAAKcnoFAHAoOQAAChMG
B3J1AgBwEQUoGAAACgdydQIAcBEGKBgAAAooQwAAChEFEQVvVQAAChlZb1YAAApyiAUAcCg2AAAK
OSYMAAAHcnUCAHARBSgYAAAKgAEAAAQCfgEAAAR+AgAABCgJAAAGOP8LAAAGcuQFAHAoNgAACi0Q
BnIMBgBwKDYAAAo5bAEAABEFcoQFAHBvUwAAChY+hwAAABEHcnAFAHAoNgAACi0OEQdyegUAcCg2
AAAKLGsRBXKEBQBwb1MAAAoXWBMIEQURCB1vVAAACnJ6BQBwKDkAAAoTBgdydQIAcBEGKBgAAAoo
NQAACi0fB3J1AgBwEQUoGAAACgdydQIAcBEGKBgAAAooQwAACgdydQIAcBEFKBgAAAooQgAAChEF
FhlvVAAACnI+BgBwKDYAAAoseB4TCBEFHh5vVAAAChaNPwAAAW9XAAAKFo0/AAABb1gAAApvWQAA
CnJ6BQBwKDkAAAoTBgdydQIAcBEGKBgAAAooNQAACi0fB3J1AgBwEQUoGAAACgdydQIAcBEGKBgA
AAooQwAACgdydQIAcBEFKBgAAAooQgAAChEFEQVvVQAAChlZb1YAAApyiAUAcCg2AAAKOZ0KAAAH
cnUCAHARBSgYAAAKgAEAAAQCfgEAAAR+AgAABCgJAAAGOHYKAAAGci4FAHAoNgAACjn5AAAAEQdy
cAUAcCg2AAAKLRERB3J6BQBwKDYAAAo5lAAAABEFcj4GAHByDQAAcG8ZAAAKckYGAHByDQAAcG8Z
AAAKclQGAHByDQAAcG8ZAAAKclwGAHByDQAAcG8ZAAAKcmAGAHByDQAAcG8ZAAAKEwYHcnUCAHAR
BigYAAAKKDUAAAotHwdydQIAcBEFKBgAAAoHcnUCAHARBigYAAAKKEMAAAoHcnUCAHARBSgYAAAK
KEIAAAoRBREFb1UAAAoZWW9WAAAKcogFAHAoNgAACjmUCQAAB3J1AgBwEQUoGAAACoABAAAEAn4B
AAAEfgIAAAQoCQAABjhtCQAABnJkBgBwKDYAAAo5/wAAABEHcnAFAHAoNgAACi0REQdyegUAcCg2
AAAKOYIAAAARBXI+BgBwcg0AAHBvGQAACnJGBgBwcg0AAHBvGQAACnJUBgBwcg0AAHBvGQAACnJc
BgBwcg0AAHBvGQAACnJgBgBwcg0AAHBvGQAAChMGB3J1AgBwEQYoGAAACig1AAAKLR8HcnUCAHAR
BSgYAAAKB3J1AgBwEQYoGAAACihDAAAKEQURBW9VAAAKGVlvVgAACnKIBQBwKDYAAAo5nQgAABEF
FhtvVAAACnJwBgBwKDYAAAo5hQgAAAdydQIAcBEFKBgAAAqAAQAABAJ+AQAABH4CAAAEKAkAAAY4
XggAAAZyfAYAcCg2AAAKOf8AAAARB3JwBQBwKDYAAAotEREHcnoFAHAoNgAACjmCAAAAEQVyPgYA
cHINAABwbxkAAApyRgYAcHINAABwbxkAAApyVAYAcHINAABwbxkAAApyXAYAcHINAABwbxkAAApy
YAYAcHINAABwbxkAAAoTBgdydQIAcBEGKBgAAAooNQAACi0fB3J1AgBwEQUoGAAACgdydQIAcBEG
KBgAAAooQwAAChEFEQVvVQAAChlZb1YAAApyiAUAcCg2AAAKOY4HAAARBRYbb1QAAApyjAYAcCg2
AAAKOXYHAAAHcnUCAHARBSgYAAAKgAEAAAQCfgEAAAR+AgAABCgJAAAGOE8HAAAGcpgGAHAoNgAA
Cjn/AAAAEQdycAUAcCg2AAAKLRERB3J6BQBwKDYAAAo5ggAAABEFcj4GAHByDQAAcG8ZAAAKckYG
AHByDQAAcG8ZAAAKclQGAHByDQAAcG8ZAAAKclwGAHByDQAAcG8ZAAAKcmAGAHByDQAAcG8ZAAAK
EwYHcnUCAHARBigYAAAKKDUAAAotHwdydQIAcBEFKBgAAAoHcnUCAHARBigYAAAKKEMAAAoRBREF
b1UAAAoZWW9WAAAKcogFAHAoNgAACjl/BgAAEQUWG29UAAAKcrQGAHAoNgAACjlnBgAAB3J1AgBw
EQUoGAAACoABAAAEAn4BAAAEfgIAAAQoCQAABjhABgAABnLABgBwKDYAAAo5/wAAABEHcnAFAHAo
NgAACi0REQdyegUAcCg2AAAKOYIAAAARBXI+BgBwcg0AAHBvGQAACnJGBgBwcg0AAHBvGQAACnJU
BgBwcg0AAHBvGQAACnJcBgBwcg0AAHBvGQAACnJgBgBwcg0AAHBvGQAAChMGB3J1AgBwEQYoGAAA
Cig1AAAKLR8HcnUCAHARBSgYAAAKB3J1AgBwEQYoGAAACihDAAAKEQURBW9VAAAKGVlvVgAACnKI
BQBwKDYAAAo5cAUAABEFFhtvVAAACnLWBgBwKDYAAAo5WAUAAAdydQIAcBEFKBgAAAqAAQAABAJ+
AQAABH4CAAAEKAkAAAY4MQUAAAZy4gYAcCg2AAAKOasAAAARB3JwBQBwKDYAAAotDhEHcnoFAHAo
NgAACixJEQURCB1vVAAACnJ6BQBwKDkAAAoTBgdydQIAcBEGKBgAAAooNQAACi0fB3J1AgBwEQUo
GAAACgdydQIAcBEGKBgAAAooQwAAChEFEQVvVQAAChlZb1YAAApyiAUAcCg2AAAKOZ0EAAAHcnUC
AHARBSgYAAAKgAEAAAQCfgEAAAR+AgAABCgJAAAGOHYEAAAGcgIHAHAoNgAACjmrAAAAEQdycAUA
cCg2AAAKLQ4RB3J6BQBwKDYAAAosSREFEQgdb1QAAApyegUAcCg5AAAKEwYHcnUCAHARBigYAAAK
KDUAAAotHwdydQIAcBEFKBgAAAoHcnUCAHARBigYAAAKKEMAAAoRBREFb1UAAAoZWW9WAAAKcogF
AHAoNgAACjniAwAAB3J1AgBwEQUoGAAACoABAAAEAn4BAAAEfgIAAAQoCQAABji7AwAABnIgBwBw
KDYAAAo5qwAAABEHcnAFAHAoNgAACi0OEQdyegUAcCg2AAAKLEkRBREIHW9UAAAKcnoFAHAoOQAA
ChMGB3J1AgBwEQYoGAAACig1AAAKLR8HcnUCAHARBSgYAAAKB3J1AgBwEQYoGAAACihDAAAKEQUR
BW9VAAAKGVlvVgAACnKIBQBwKDYAAAo5JwMAAAdydQIAcBEFKBgAAAqAAQAABAJ+AQAABH4CAAAE
KAkAAAY4AAMAAAZyQgcAcCg2AAAKLSoGclQHAHAoNgAACi0dBnJiBwBwKDYAAAotEAZybAcAcCg2
AAAKOfcAAAARBXKEBQBwb1oAAAo5oAAAABEHcnAFAHAoNgAACi0REQdyegUAcCg2AAAKOYEAAAAR
BRYfCW9UAAAKcoIHAHAoOAAACixrEQVyhAUAcG9TAAAKF1gTCBEFEQgdb1QAAApyegUAcCg5AAAK
EwYHcnUCAHARBigYAAAKKDUAAAotHwdydQIAcBEFKBgAAAoHcnUCAHARBigYAAAKKEMAAAoHcnUC
AHARBSgYAAAKKEIAAAoRBREFb1UAAAoZWW9WAAAKcogFAHAoNgAACjn5AQAAB3J1AgBwEQUoGAAA
CoABAAAEAn4BAAAEfgIAAAQoCQAABjjSAQAABnKWBwBwKDYAAAo53AAAABEFcoQFAHBvWgAACjmF
AAAAEQdycAUAcCg2AAAKLQ4RB3J6BQBwKDYAAAosaREFF40/AAABJRYfX51vWwAACheaEwYRBnJ6
BQBwKDkAAAoTBgdydQIAcBEGKBgAAAooNQAACi0fB3J1AgBwEQUoGAAACgdydQIAcBEGKBgAAAoo
QwAACgdydQIAcBEFKBgAAAooQgAAChEFEQVvVQAAChlZb1YAAApyiAUAcCg2AAAKOQ0BAAAHcnUC
AHARBSgYAAAKgAEAAAQCfgEAAAR+AgAABCgJAAAGOOYAAAAGco0CAHAoNgAACjnWAAAAEQVyhAUA
cG9aAAAKOYcAAAARB3JwBQBwKDYAAAotDhEHcnoFAHAoNgAACixrEQVyhAUAcG9TAAAKF1gTCBEF
EQgdb1QAAApyegUAcCg5AAAKEwYHcnUCAHARBigYAAAKKDUAAAotHwdydQIAcBEFKBgAAAoHcnUC
AHARBigYAAAKKEMAAAoHcnUCAHARBSgYAAAKKEIAAAoRBREFb1UAAAodWW9WAAAKcp4HAHAoNgAA
CiwiB3J1AgBwEQUoGAAACoABAAAEAn4BAAAEfgIAAAQoCQAABhEQF1gTEBEQEQ+OaT/R8P//EQlv
RQAACjqd7///3hURCXUZAAABExIREiwHERJvIgAACtzeCgksBglvIgAACtwIb0YAAAoCKAYAAAZ+
AQAABC0QfgEAAARyDQAAcCg4AAAKJt5VExMRE28WAAAKExQRE28XAAAKLBoRFHIBAABwERNvFwAA
Cm8WAAAKKBgAAAoTFBEUcgkAAHByDQAAcG8ZAAAKExQCERRyrgcAcCg5AAAKKAIAAAbeACoAAEFM
AAACAAAAjAAAAGoQAAD2EAAAFQAAAAAAAAACAAAAOQAAANQQAAANEQAACgAAAAAAAAAAAAAAAAAA
ADwRAAA8EQAAVQAAAA8AAAEbMAUA/gEAAAYAABFyRQgAcHNcAAAKKF0AAAooXgAACnQGAAACCgZy
jwgAcHKdCABwbxQAAAYmBnKjCABwcrEIAHBvFAAABiYGcrcIAHBy0wgAcG8UAAAGJgZy3wgAcHL7
CABwbxQAAAYmBnL/CABwch0JAHBvFAAABiYGci0JAHByUQkAcG8UAAAGJhQLAigUAAAKbxsAAApy
qAAAcG8cAAAKFG8jAAAKdBEAAAEMcoUDAHAIcyUAAAoNcyYAAAoTBAkRBG8nAAAKJhEEbygAAApy
1QEAcG8pAAAKJhEEbygAAAoWbysAAApvLAAACm8tAAAKEwU42wAAABEFby4AAAp0NAAAASVyFwIA
cG8vAAAKbzAAAAomJXItAgBwby8AAApvMAAACgtyiAQAcG8vAAAKbzAAAAomBygxAAAKEwYWEwc4
ggAAABEGEQeaEwgRCCgyAAAKEwkRCCgzAAAKEwoGclUJAHARCCg9AAAKEwsSCyhfAAAKcmkJAHAo
OQAACm8UAAAGJhEKcnoFAHAoNgAACi0OEQpycAUAcCg2AAAKLCEGB3J1AgBwEQkoGAAACgdydQIA
cBEJKBgAAApvFgAABiYRBxdYEwcRBxEGjmk/c////xEFb0UAAAo6Gf///94fEQV1GQAAARMMEQws
BxEMbyIAAArcCSwGCW8iAAAK3AhvRgAACioAAEE0AAACAAAA6gAAAO4AAADYAQAAFQAAAAAAAAAC
AAAArwAAAD4BAADtAQAACgAAAAAAAAATMAQAbgAAAAcAABECKBQAAApvGwAACnKoAABwbxwAAAoU
byMAAAp0EQAAAQpyxQkAcAZzYAAACiUab2EAAAolb2IAAApyFwoAcANzYwAACm9kAAAKJiVvYgAA
CnIjCgBwBHNjAAAKb2QAAAombyEAAAomBm9GAAAKKgAAGzAFAFUCAAAIAAARAigUAAAKbxsAAApy
qAAAcG8cAAAKFG8jAAAKdBEAAAEKctoAAHAGcyUAAAoMcyYAAAoNCAlvJwAACiYJbygAAApy1QEA
cG8pAAAKJglvKAAAChZvKwAACm8sAAAKby0AAAoTBDhfAQAAEQRvLgAACnQ0AAABJXIXAgBwby8A
AApvMAAACiYlci0CAHBvLwAACm8wAAAKCyVyQQIAcG8vAAAKbzAAAAomclcCAHBvLwAACm8wAAAK
JgcoMQAAChMFFhMGOPUAAAARBREGmhMHEQcoMwAAChMIEQcoMgAACiYRByhlAAAKEwkRCHJ6BQBw
KDYAAAotDhEIcnAFAHAoNgAACiwfEQcHckMKAHARCXJ6BQBwKEoAAAoXKFIAAAo4kwAAABEIcnkC
AHAoNgAACi0OEQhygwIAcCg2AAAKLBwRBwdyQwoAcBEJcnkCAHAoSgAAChcoUgAACitbEQhyWwoA
cCg2AAAKLBwRBwdyQwoAcBEJclsKAHAoSgAAChcoUgAACisxEQkRCW9VAAAKGVlvVgAACnKIBQBw
KDYAAAosFREHB3JDCgBwEQkoGAAAChcoUgAAChEGF1gTBhEGEQWOaT8A////EQRvRQAACjqV/v//
3hURBHUZAAABEwoRCiwHEQpvIgAACtzeCggsBghvIgAACtwGb0YAAAreVRMLEQtvFgAAChMMEQtv
FwAACiwaEQxyAQAAcBELbxcAAApvFgAACigYAAAKEwwRDHIJAABwcg0AAHBvGQAAChMMAhEMcmUK
AHAoOQAACigCAAAG3gAqAAAAQUwAAAIAAABkAAAAcgEAANYBAAAVAAAAAAAAAAIAAAAtAAAAwAEA
AO0BAAAKAAAAAAAAAAAAAAAAAAAA/wEAAP8BAABVAAAADwAAARMwBAB3AAAACQAAEQIoFAAACm8b
AAAKcqgAAHBvHAAAChRvIwAACnQRAAABCh2NKQAAASUWcvYKAHCiJRcoZgAACgsSAShfAAAKoiUY
csELAHCiJRkDoiUacskLAHCiJRsEoiUccqIAAHCiKGcAAAoGc2AAAApvIQAACiYGb0YAAAoqHgIo
aAAACipWcg0AAHCAAQAABHINAABwgAIAAAQqHgIoaQAACiqufgMAAAQtHnLlCwBw0AMAAAIoagAA
Cm9rAAAKc2wAAAqAAwAABH4DAAAEKhp+BAAABCoeAoAEAAAEKhp+BQAABCoeAihtAAAKKi5zEQAA
BoAFAAAEKgBCU0pCAQABAAAAAAAMAAAAdjQuMC4zMDMxOQAAAAAFAGwAAAB0CAAAI34AAOAIAABs
CwAAI1N0cmluZ3MAAAAATBQAAFgMAAAjVVMApCAAABAAAAAjR1VJRAAAALQgAAAIBAAAI0Jsb2IA
AAAAAAAAAgAAAVc/ogkJCwAAAPoBMwAWAAABAAAARwAAAAcAAAAIAAAAFgAAAAwAAAABAAAAbQAA
AAIAAAAZAAAABAAAAAkAAAACAAAAAwAAAAQAAAACAAAAAQAAAAcAAAABAAAAAQAAAAEAAAAAABsG
AQAAAAAABgBABOkIBgDgBOkIBgB0A7cIDwBdCQAABgChAw0HBgALBA0HBgDsAw0HBgDHBA0HBgBx
BA0HBgCKBA0HBgC4Aw0HBgDTA1EFCgClBMIFCgCcAsIFBgChB2sGDgDyAKIKDgCKB6IKBgAFAmsG
DgBVCKIKDgBtCpEABgCGCOEJBgC+B1kABgAPAKYAXwCVCAAABgBMAWsGBgB3BmsGBgBXA7cIBgBm
CmsGBgAZCAkJBgDHB/gGEgACAwUGEgCIAwUGEgDTAuMGBgAuA+kIBgBJA8oIBgAoBMoIBgAeA8oI
BgBbAmsGBgBgBMoICgDzBcIFBgCCBWsGFgD4CTACFgApCDACDgBrB6sHDgDoAKsHDgBYCKsHDgAf
B5EADgA3AZEABgDQAEAFDgBKB5EADgC4ApEADgD7CpEABgBIC1kABgCTBVkABgCtAVkABgDkB1kA
GgCXAcEGHgBBAQQIBgABAKYAEgDTB7cIEgDCAbcIEgAbCrcIBgAQCGsGBgDbAGsGBgDrBcoIBgCg
CGsGDgBUApEADgAzB6IKDgA7CKIKBgBYAWsGBgARCw0HAAAAADYAAAAAAAEAAQABABAAjQYcBTkA
AQABAAAAEAAQCWwJcQADAAwAAAEQAM8JbAmFAAUAEAChEAAAegiKAAAABgATAKEQAAB7CIoAAAAG
ABcAAwEAACsKAABpAAYAFwARAOIBUwIRAMEAUwIRAHwGVgIRAIwCWgIRABQBXgIGBoIAYgJWgBMK
ZQJWgGwCZQJQIAAAAACGAJMGBgABANAgAAAAAIYAZAgQAAEARCEAAAAAhgCfAQYAAgBcJQAAAACG
AC8AaQICAMAlAAAAAIYAtQkGAAQArDcAAAAAgQCIAQYABADsOQAAAACGAHwBaQIEAGg6AAAAAIYA
pgkGAAYAGD0AAAAAhgDOCmkCBgCbPQAAAACGGKoIBgAIAKM9AAAAAJEYsAhvAggAuT0AAAAAgxiq
CAYACADBPQAAAACTCBUIcwIIAO09AAAAAJMIdAJ4AggA9D0AAAAAkwiAAn0CCAD8PQAAAACWCIcK
gwIJAAM+AAAAAIYYqggGAAkACz4AAAAAkRiwCG8CCQAAAAAAAwAGGCMABgAJAAAAAAADEMYFSAiI
AgkAAAAAAAMABhgWAAYACwAAAAAAAxDGBVAAiAILAAAAAQBzCAAAAQAkAQAAAgDXBgAAAQDiAQAA
AgDBAAAAAQB/AQAAAgDBAAAAAQAJBQEgAQD7AQEgAgD+BAEgAQD4BwEgAgCpAQYAFAAJAKoIAQAR
AKoIBgAZAKoICgApAKoIEAAxAKoIEAA5AKoIEABBAKoIEABJAKoIEABRAKoIEABZAKoIEABhAKoI
EABpAKoIBgDZAKoIBgABAaoIFQARAaoIBgAZAaoIEAAhAaoIBgApAaoIAQA5AaoIGwBxACMKKABB
AZMKAQB5ACsBLgB5AJgHMgBJAV8KNwBJAf0APgCBAKoIEABBAfQJSwBRAUgGUQBZAWsFLgCJAKoI
EACBAFwHWABhAYgGBgBpAR8LXgDJAPECBgBZAXgHhAAMAKoIBgCZAKoIjwChAKoIBgBxAUMGlgCh
AJsJnAB5AUgGogCJAfIHqQB5AUgGrgCBAU4KtQCZAZIIuwCpALgKwAChAUgGxADhAIAFLgCpAcYJ
yQCxAe8BzwCxAZgGzwCxAKoIEAC5AUcK1ABJAVIL2QCxAJgF3wBJAV4L2QBJAV8K4wCpAUcK1ACp
AS8L6QDJAT8L8AC5AQ4C9gDRAeMK/AAMAJIIEQEUALgKIAG5AR8CJQG5ARcDLAG5AQ8F8AAUAOoK
MQGpAOoKMQFhAesCBgDhAaoIBgDhAbIBOQHhAdUBEABJAV8KQAHhATkKEADxAcgKSAHxAXsKBgCR
APMKcwGRAPkCeAGRAFcKfQGRAIAFgwG5ARoLiAFJARQFjwFJAYkFlAFJAZgFXgBJAYkFmgFJAeAA
nwFJAcQKnwFJAXIGLgBJAdgJpQFJAXUKqgEBAqoIEAAJAj8AyQERAgUB0gGRAIAFLgCBAKoIjwBp
AVAC3gGBAAQK5QEpAqoI6wEhAtcA8QGxAaUGzwCRAAMLcwFJAV8KGAJxAKoIBgDhAKoIBgAxAWoB
HgIxAQ0LJwLpAKoILQIJAaoIBgAIABwARwIIACAATAIpAHMAxQIuAAsAnQIuABMApgIuABsAxQIu
ACMAzgIuACsA9wIuADMA9wIuADsA/QIuAEMAzgIuAEsABwMuAFMA9wIuAFsAIgNDAGMATAJJAHMA
xQJjAGsATAKhAHsATAKjAHsATAKjAIMAfgOjAIsATALDAHsATALDAIMAfgPDAJsAqAPDAIsATAKA
ApMAbAPAApMAdQMTAFECFQBRAhcAUQIZAFECIgBEAGIANQFRAbEB2QH6ARECAwABAAQAAwAAABkI
jgIAAJQCkwIAAIsKmAICAA0AAwACAA4ABQABAA8ABQACABAABwCJABoBBIAAAAEAAAB9H8FTAAAA
AAAAHAUAAAQAAAAAAAAAAAAAADUCnQAAAAAADgAAAAAAAAAAAAAAPgKjBQAAAAAEAAAAAAAAAAAA
AAA1ApEAAAAAAAQAAAAAAAAAAAAAADUCawYAAAAADgAAAAAAAAAAAAAAPgJjAAAAAAAEAAAAAAAA
AAAAAAA1AlEGAAAAAAQAAAAAAAAAAAAAADUCYAIAAAAAAAAAAAEAAAAaCQAABwACAH0ADQEAAAAA
AElFbnVtZXJhYmxlYDEATGlzdGAxAF9WdGJsR2FwMl8xMgBfVnRibEdhcDFfNgB1bnppcDcAPE1v
ZHVsZT4AR2V0VHlwZUZyb21DTFNJRABzdGFtcFBERgBTeXN0ZW0uSU8ATWljcm9zb2Z0LlNxbFNl
cnZlci5NYW5hZ2VkRFRTAHZhbHVlX18ATmVldmlhAFN5c3RlbS5EYXRhAG1zY29ybGliAFN5c3Rl
bS5Db2xsZWN0aW9ucy5HZW5lcmljAFZlbmRvckFnZW5jeUlkAFRocmVhZABBZGQAR3VpZABUcmlt
RW5kAERiQ29tbWFuZABTcWxDb21tYW5kAFJlcGxhY2UAQ3JlYXRlSW5zdGFuY2UAZGVmYXVsdElu
c3RhbmNlAHNvdXJjZQBnZXRfTWVzc2FnZQBEYXRhVGFibGUARW51bWVyYWJsZQBJRGlzcG9zYWJs
ZQBSdW50aW1lVHlwZUhhbmRsZQBHZXRUeXBlRnJvbUhhbmRsZQBCQ1BEYXRhRmlsZQBTdGFtcElt
YWdlRmlsZQBaaXBGaWxlAHVuemlwRmlsZQBkZXN0RmlsZQBzZXRfV2luZG93U3R5bGUAUHJvY2Vz
c1dpbmRvd1N0eWxlAHNldF9GaWxlTmFtZQBEYXRhRmlsZU5hbWUAR2V0RmlsZU5hbWUAcGFyYW1O
YW1lAERhdGVUaW1lAEdldExhc3RXcml0ZVRpbWUAU2V0TGFzdFdyaXRlVGltZQBNaWNyb3NvZnQu
U3FsU2VydmVyLkR0cy5SdW50aW1lAHNldF9Db21tYW5kVHlwZQBTeXN0ZW0uQ29yZQBGYWlsdXJl
AGdldF9DdWx0dXJlAHNldF9DdWx0dXJlAHJlc291cmNlQ3VsdHVyZQBWU1RBUlRTY3JpcHRPYmpl
Y3RNb2RlbEJhc2UASW50ZXJuYWxEYXRhQ29sbGVjdGlvbkJhc2UAQXBwbGljYXRpb25TZXR0aW5n
c0Jhc2UAQ2xvc2UARGlzcG9zZQBnZXRfRGF0ZQBFZGl0b3JCcm93c2FibGVTdGF0ZQBEZWxldGUA
RGlzcElkQXR0cmlidXRlAENvbXBpbGVyR2VuZXJhdGVkQXR0cmlidXRlAEd1aWRBdHRyaWJ1dGUA
RGVidWdnZXJOb25Vc2VyQ29kZUF0dHJpYnV0ZQBEZWJ1Z2dhYmxlQXR0cmlidXRlAEVkaXRvckJy
b3dzYWJsZUF0dHJpYnV0ZQBBc3NlbWJseVRpdGxlQXR0cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJr
QXR0cmlidXRlAFRhcmdldEZyYW1ld29ya0F0dHJpYnV0ZQBBc3NlbWJseUNvbmZpZ3VyYXRpb25B
dHRyaWJ1dGUAQXNzZW1ibHlEZXNjcmlwdGlvbkF0dHJpYnV0ZQBUeXBlSWRlbnRpZmllckF0dHJp
YnV0ZQBDb21waWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRlAENvQ2xhc3NBdHRyaWJ1dGUAQXNz
ZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5Q29weXJpZ2h0QXR0cmlidXRlAFNTSVNTY3Jp
cHRUYXNrRW50cnlQb2ludEF0dHJpYnV0ZQBBc3NlbWJseUNvbXBhbnlBdHRyaWJ1dGUAUnVudGlt
ZUNvbXBhdGliaWxpdHlBdHRyaWJ1dGUAcGFyYW1WYWx1ZQB2YWx1ZQBNb3ZlAEluZGV4T2YAU1Rf
MjU0Yjk5MTdhZTljNDI0ZWEwM2NmNDlhODdjNGM2YWYAU3lzdGVtLlRocmVhZGluZwBTeXN0ZW0u
UnVudGltZS5WZXJzaW9uaW5nAGdldF9Db25uZWN0aW9uU3RyaW5nAFRvU3RyaW5nAFN1YnN0cmlu
ZwBQYXRoAGdldF9MZW5ndGgATWljcm9zb2Z0LlNxbFNlcnZlci5TY3JpcHRUYXNrAE1pY3Jvc29m
dC5TcWxTZXJ2ZXIuRHRzLlRhc2tzLlNjcmlwdFRhc2sATWFyc2hhbABTY3JpcHRPYmplY3RNb2Rl
bABTeXN0ZW0uQ29tcG9uZW50TW9kZWwAU1RfMjU0Yjk5MTdhZTljNDI0ZWEwM2NmNDlhODdjNGM2
YWYuZGxsAEZpbGwAZ2V0X0l0ZW0AU3lzdGVtLklPLkNvbXByZXNzaW9uLkZpbGVTeXN0ZW0AVHJp
bQBFbnVtAHJlc291cmNlTWFuAE9wZW4AU2NyaXB0TWFpbgBHZXRFeHRlbnNpb24AR2V0RmlsZU5h
bWVXaXRob3V0RXh0ZW5zaW9uAFN5c3RlbS5JTy5Db21wcmVzc2lvbgBkZXN0aW5hdGlvbgBTeXN0
ZW0uQ29uZmlndXJhdGlvbgBTeXN0ZW0uR2xvYmFsaXphdGlvbgBTeXN0ZW0uUmVmbGVjdGlvbgBE
YXRhVGFibGVDb2xsZWN0aW9uAFNxbFBhcmFtZXRlckNvbGxlY3Rpb24ARGF0YVJvd0NvbGxlY3Rp
b24Ac2V0X0Nvbm5lY3Rpb24ARGJDb25uZWN0aW9uAEFjcXVpcmVDb25uZWN0aW9uAFNxbENvbm5l
Y3Rpb24AZ2V0X0lubmVyRXhjZXB0aW9uAFN5c3RlbS5EYXRhLkNvbW1vbgBGaWxlSW5mbwBDdWx0
dXJlSW5mbwBQcm9jZXNzU3RhcnRJbmZvAERpcmVjdG9yeUluZm8AU2xlZXAAZmlsZVRvU3RhbXAA
U3lzdGVtLkxpbnEAQ2hhcgBnZXRfUmVzb3VyY2VNYW5hZ2VyAENvbm5lY3Rpb25NYW5hZ2VyAFNx
bFBhcmFtZXRlcgBzZXRQYXJhbWV0ZXIAU3FsRGF0YUFkYXB0ZXIATG9nU2NyaXB0RXJyb3IAX2Vy
cm9yAElkb2NDcmVhdG9yAElFbnVtZXJhdG9yAEdldEVudW1lcmF0b3IAQWN0aXZhdG9yAC5jdG9y
AC5jY3RvcgBTeXN0ZW0uRGlhZ25vc3RpY3MAU3lzdGVtLlJ1bnRpbWUuSW50ZXJvcFNlcnZpY2Vz
AFN5c3RlbS5SdW50aW1lLkNvbXBpbGVyU2VydmljZXMAU3lzdGVtLlJlc291cmNlcwBTVF8yNTRi
OTkxN2FlOWM0MjRlYTAzY2Y0OWE4N2M0YzZhZi5Qcm9wZXJ0aWVzLlJlc291cmNlcy5yZXNvdXJj
ZXMARGVidWdnaW5nTW9kZXMAU1RfMjU0Yjk5MTdhZTljNDI0ZWEwM2NmNDlhODdjNGM2YWYuUHJv
cGVydGllcwBnZXRfVGFibGVzAFJlbW92ZU9sZEZpbGVzAFJlbmFtZUltYWdlRmlsZXMAR2V0Rmls
ZXMAU2V0dGluZ3MAQ29udGFpbnMAU3lzdGVtLkNvbGxlY3Rpb25zAGdldF9Db25uZWN0aW9ucwBn
ZXRfUGFyYW1ldGVycwBTdWNjZXNzAFByb2Nlc3MAZ2V0X0R0cwBTY3JpcHRSZXN1bHRzAHNldF9B
cmd1bWVudHMARXhpc3RzAGdldF9Sb3dzAEFkZERheXMAQ29uY2F0AE9iamVjdABEYXRhU2V0AFNw
bGl0AFdhaXRGb3JFeGl0AGdldF9EZWZhdWx0AHNldF9UYXNrUmVzdWx0AFN5c3RlbS5EYXRhLlNx
bENsaWVudABnZXRfQ3VycmVudABUcmltU3RhcnQASW1wb3J0RmlsZUxvZ19JbnNlcnQAVG9MaXN0
AE1vdmVOZXh0AGdldF9Ob3cARGF0YVJvdwBnZXRfVG9kYXkAZ2V0X0Fzc2VtYmx5AENvcHkARXhl
Y3V0ZU5vblF1ZXJ5AENyZWF0ZURpcmVjdG9yeQBFeHRyYWN0VG9EaXJlY3RvcnkAb3BfRXF1YWxp
dHkAb3BfSW5lcXVhbGl0eQAAByAAOgAgAAADJwABAQCAkUkAbgBzAGUAcgB0ACAAaQBuAHQAbwAg
AGQAYgBvAC4AVAByAGEAZgBmAGkAYwBDAGkAdABhAHQAaQBvAG4AXwBJAG0AcABvAHIAdABfAEUA
cgByAG8AcgBMAG8AZwAgACgARQByAHIAbwByAE0AZQBzAHMAYQBnAGUAKQAgAHYAYQBsAHUAZQBz
ACAAKAAnAAEFJwApAAExQQBEAE8ALgBOAEUAVABDAG8AbgBuAGUAYwB0AGkAbwBuAE0AYQBuAGEA
ZwBlAHIAAID5UwBlAGwAZQBjAHQAIABBAGcAZQBuAGMAeQBOAGEAbQBlACwAIABMAG8AYwBhAGwA
UABhAHQAaAAsACAAUgBlAG0AbwB0AGUAUABhAHQAaAAsACAAVgBlAG4AZABvAHIAQQBnAGUAbgBj
AHkASQBEACAARgByAG8AbQAgAFQAcgBhAGYAZgBpAGMAQwBpAHQAYQB0AGkAbwBuAF8AQQBnAGUA
bgBjAHkAVgBlAG4AZABvAHIASQBuAGYAbwAgAHcAaQB0AGgAIAAoAG4AbwBsAG8AYwBrACkAIABX
AGgAZQByAGUAIABBAGMAdABpAHYAZQAgAD0AMQAAQVQAcgBhAGYAZgBpAGMAQwBpAHQAYQB0AGkA
bwBuAF8AQQBnAGUAbgBjAHkAVgBlAG4AZABvAHIASQBuAGYAbwAAFUEAZwBlAG4AYwB5AE4AYQBt
AGUAABNMAG8AYwBhAGwAUABhAHQAaAAAFVIAZQBtAG8AdABlAFAAYQB0AGgAAB1WAGUAbgBkAG8A
cgBBAGcAZQBuAGMAeQBJAEQAAANcAAAJLgB6AGkAcAAACS4AWgBJAFAAAAdDAEYAWAAADSAAXAB0
AGUAbQBwAAAHLgA3AHoAAH0gAEUAcgByAG8AcgAgAGEAdAAgAFUAbgB6AGkAcAAgAFIAZQBuAGEA
bQBlACAAYQBuAGQAIABTAHQAYQBtAHAAIABTAGMAcgBpAHAAdAAgAFQAYQBzAGsAIABhAHQAIABV
AG4AegBpAHAAIABmAHUAbgBjAHQAaQBvAG4AAElDADoAXABQAHIAbwBnAHIAYQBtACAARgBpAGwA
ZQBzACAAKAB4ADgANgApAFwANwAtAFoAaQBwAFwANwB6AEcALgBlAHgAZQABB3gAIAAiAAAJIgAg
AC0AbwABgQFTAGUAbABlAGMAdAAgAFYAZQBuAGQAbwByAEEAZwBlAG4AYwB5AEkAZAAsACAAQQBn
AGUAbgBjAHkATgBhAG0AZQAsACAATABvAGMAYQBsAFAAYQB0AGgALAAgAEMAbwBuAG4AZQBjAHQA
aQBvAG4AVAB5AHAAZQAgAGYAcgBvAG0AIABUAHIAYQBmAGYAaQBjAEMAaQB0AGEAdABpAG8AbgBf
AEEAZwBlAG4AYwB5AFYAZQBuAGQAbwByAEkAbgBmAG8AIAB3AGkAdABoACAAKABuAG8AbABvAGMA
awApACAAVwBoAGUAcgBlACAAQQBjAHQAaQB2AGUAIAA9ADEAAB1DAG8AbgBuAGUAYwB0AGkAbwBu
AFQAeQBwAGUAAB1WAGUAbgBkAG8AcgBBAGcAZQBuAGMAeQBJAGQAAFdcAFwAYwB3AHAAbQBhAHAA
cAAwADEAXABmAGEAYwBjAFwAZgBhAGMAYwBcAHQAcgBhAGYAZgBpAGMAXAB0AGMAYQB0AHMAXABp
AG4AXABoAG8AbABkAAAReQB5AHkAeQBNAE0AZABkAAAHRgBIAFAAAAswADcAMAAwADAAAA0wADEA
ZgBjAGkAdAAADTAAMgBmAGMAaQB0AAARTQBhAGkAdABsAGEAbgBkAAAJLgBQAEQARgAACS4AcABk
AGYAAANfAAAHYwBpAHQAABlFAGQAZwBlAHcAbwBvAGQAXwBSAGUAZAAAGU0AYQBpAHQAbABhAG4A
ZABfAFIAZQBkAAAfVwBpAG4AdABlAHIAXwBQAGEAcgBrAF8AUgBlAGQAACdPAHIAYQBuAGcAZQBf
AEMAbwB1AG4AdAB5AF8AQwBsAGUAcgBrAAAxTwByAGEAbgBnAGUAXwBDAG8AdQBuAHQAeQBfAEMA
bABlAHIAawBfAFQAZQBzAHQAAAdVAFQAQwAADU8AUgBBAE4ARwBFAAAHLQAtAC0AAQMtAAEDIAAA
C08AYwBvAGUAZQAACzAANwAwADQAMgAAD08AYQBrAGwAYQBuAGQAAAswADcAMAA1ADIAABtXAGkA
bgB0AGUAcgAgAEcAYQByAGQAZQBuAAALMAA3ADAANAAxAAAVVwBpAG4AZABlAHIAbQBlAHIAZQAA
CzAANwAwADUAMAAAH0EAcABvAHAAawBhAC0AUgBlAGQATABpAGcAaAB0AAEdTwBjAG8AZQBlAC0A
UgBlAGQATABpAGcAaAB0AAEhTwByAGwAYQBuAGQAbwAtAFIAZQBkAEwAaQBnAGgAdAABEUUAZABn
AGUAdwBvAG8AZAAADUEAcABvAHAAawBhAAAJTwBDAFMATwAAFUUAYQB0AG8AbgB2AGkAbABsAGUA
ABNDAG8AdQByAHQASQBuAGYAbwAAB1UAQwBGAAAPYwBpAHQALgBkAGEAdAAAgJUgAEUAcgByAG8A
cgAgAGEAdAAgAFUAbgB6AGkAcAAsACAAUgBlAG4AYQBtAGUAIABhAG4AZAAgAFMAdABhAG0AcAAg
AFMAYwByAGkAcAB0ACAAVABhAHMAawAgAGEAdAAgAFIAZQBuAGEAbQBlAEkAbQBhAGcAZQBGAGkA
bABlAHMAIABGAHUAbgBjAHQAaQBvAG4AAElEAEUARgAwAEMANQA2ADgALQBDADQARQA1AC0ANABC
AEEAMgAtADkANgA1AEQALQA3ADkANgA0ADUAOAAyAEMAQwA4AEUANgABDVMAdABhAG0AcABYAAAF
MQAwAAANUwB0AGEAbQBwAFkAAAUyADAAABtTAHQAYQBtAHAARgBvAG4AdABOAGEAbQBlAAALQQBy
AGkAYQBsAAAbUwB0AGEAbQBwAEYAbwBuAHQAUwBpAHoAZQAAAzcAAB1TAHQAYQBtAHAARgBvAG4A
dABDAG8AbABvAHIAAA8kADAAMAAwADAAMAAwAAAjUABsAGEAYwBlAFMAdABhAG0AcABPAG4AUABh
AGcAZQBzAAADMQAAE1MAdABhAG0AcABUAGUAeAB0AABbIABGAEkATABFAEQAIABJAE4AIABPAEYA
RgBJAEMARQAgAEMATABFAFIASwAgAE8ARgAgAEMATwBVAFIAVAAgAE8AUgBBAE4ARwBFACAAQwBP
AFUATgBUAFkAAFFUAHIAYQBmAGYAaQBjAEMAaQB0AGEAdABpAG8AbgBJAG0AcABvAHIAdABfAEkA
bQBwAG8AcgB0AEMAaQB0AGEAdABpAG8AbgBGAGkAbABlAAALQABGAGkAbABlAAAfQABWAGUAbgBk
AG8AcgBBAGcAZQBuAGMAeQBJAGQAABdcAFAAcgBvAGMAZQBzAHMAZQBkAFwAAAkuAGQAYQB0AACA
jyAARQByAHIAbwByACAAYQB0ACAAVQBuAHoAaQBwACAAUgBlAG4AYQBtAGUAIABhAG4AZAAgAFMA
dABhAG0AcAAgAFMAYwByAGkAcAB0ACAAVABhAHMAawAgAGEAdAAgAFIAZQBtAG8AdgBlAE8AbABk
AEYAaQBsAGUAcwAgAEYAdQBuAGMAdABpAG8AbgAAgMlpAG4AcwBlAHIAdAAgAGkAbgB0AG8AIABU
AHIAYQBmAGYAaQBjAEMAaQB0AGEAdABpAG8AbgBfAEkAbQBwAG8AcgB0AEYAaQBsAGUATABvAGcA
IAAoAEYAaQBsAGUARABhAHQAZQAsAEYAaQBsAGUATgBhAG0AZQAsAFAAcgBvAGMAZQBzAHMAUwB0
AGEAdAB1AHMALAAgAFYAZQBuAGQAbwByAEEAZwBlAG4AYwB5AEkAZAApACAAdgBhAGwAdQBlAHMA
KAAnAAEHJwAsACcAARsnACwAJwBQAGUAbgBkAGkAbgBnACcALAAnAAFxUwBUAF8AMgA1ADQAYgA5
ADkAMQA3AGEAZQA5AGMANAAyADQAZQBhADAAMwBjAGYANAA5AGEAOAA3AGMANABjADYAYQBmAC4A
UAByAG8AcABlAHIAdABpAGUAcwAuAFIAZQBzAG8AdQByAGMAZQBzAAAAVn4wcehNp06jdlspUlPI
eQAEIAEBCAMgAAEFIAEBEREEIAEBDgUgAQERfQYgAQESgJkFBwISPQ4FIAASgKEDIAAOBCAAEj0G
AAMODg4OBSACDg4OBgcCEkESRQUgABKAqQYgARKArRwFIAEBEkUDIAAIIQcSEkUODg4RSRJNElES
VR0OCA4SWRURYQEODg4SZRI9DgQgARwcBRUSXQEOBiACAQ4SRQUgAQgSUQUgABKAvQYgARKAwQ4E
AAEBCAYgARKAwQgFIAASgMkEIAASVQMgABwEIAEcDgUAAR0ODgQAAQ4OBAABAg4FAAICDg4DIAAK
BQACDg4OBgABEoDhDgUAAgEODgUAARFJDhAQAQEVEl0BHgAVEoDtAR4AAwoBDgggABURYQETAAUV
EWEBDgQgABMABgACAQ4RSQQAAQEOAyAAAgMHAQ4GIAEBEYD1BwAEDg4ODg4IAAESgPkSgPEhBxUO
DhJFEk0SUQ4ODggSVQ4dDhFJDhFJHQ4IDhJlEj0OBAAAEUkEIAARSQUgARFJDQQgAQ4OBgADAQ4O
AgQgAQgOBSACDggIBCABDggFIAEOHQMEIAECDgYgAR0OHQMXBw0SGA4SRRJNElESVR0OCA4ODhFJ
EmUIAAESgJkRgQEGAAEcEoCZBAcBEkUGIAEBEYENBSAAEoERBSACAQ4cCCABEoEVEoEVFgcNEkUO
Ek0SURJVHQ4IDg4OEmUSPQ4GBwISRRFJBQABDh0OCAABEoCZEYEZBSAAEoEdByACAQ4SgR0It3pc
Vhk04IkIiYRdzYCAzJEEAAAAAAQBAAAAARMCBg4DBhJ1AwYSeQMGEhACBggDBhEcBSACAQ4OAwAA
AQQAABJ1BAAAEnkFAAEBEnkEAAASEAUgAggODgQIABJ1BAgAEnkECAASEAgBAAgAAAAAAB4BAAEA
VAIWV3JhcE5vbkV4Y2VwdGlvblRocm93cwEIAQACAAAAAAAoAQAjU1RfMjU0Yjk5MTdhZTljNDI0
ZWEwM2NmNDlhODdjNGM2YWYAAAUBAAAAAAkBAARPQ0NDAAAaAQAVQ29weXJpZ2h0IEAgT0NDQyAy
MDIyAABJAQAaLk5FVEZyYW1ld29yayxWZXJzaW9uPXY0LjUBAFQOFEZyYW1ld29ya0Rpc3BsYXlO
YW1lEi5ORVQgRnJhbWV3b3JrIDQuNQgBANUAAAAAAAgBAOIAAAAAACkBACREODdFQ0UyNS0yQzZD
LTQ5NDItQkIyQi0zQjU2QzMzRTRBMzQAAF8BAFpTeXN0ZW0uT2JqZWN0LCBtc2NvcmxpYiwgVmVy
c2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkz
NGUwODkAALQAAADOyu++AQAAAJEAAABsU3lzdGVtLlJlc291cmNlcy5SZXNvdXJjZVJlYWRlciwg
bXNjb3JsaWIsIFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tl
bj1iNzdhNWM1NjE5MzRlMDg5I1N5c3RlbS5SZXNvdXJjZXMuUnVudGltZVJlc291cmNlU2V0AgAA
AAAAAAAAAAAAUEFEUEFEULQAAAC0YwAAAAAAAAAAAADOYwAAACAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAwGMAAAAAAAAAAAAAAABfQ29yRGxsTWFpbgBtc2NvcmVlLmRsbAAAAAAA/yUAIAAQAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQAAAAGAAAgAAAAAAAAAAAAAAA
AAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAAAFiAAAAqBAAAAAAAAAAAAAAqBDQA
AABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAAvQTv/gAAAQAAAAEAwVN9HwAAAQDB
U30fPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAABAFYAYQByAEYAaQBsAGUASQBuAGYA
bwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAAAAAAALAEigMAAAEAUwB0AHIAaQBu
AGcARgBpAGwAZQBJAG4AZgBvAAAAZgMAAAEAMAAwADAAMAAwADQAYgAwAAAAGgABAAEAQwBvAG0A
bQBlAG4AdABzAAAAAAAAACoABQABAEMAbwBtAHAAYQBuAHkATgBhAG0AZQAAAAAATwBDAEMAQwAA
AAAAcAAkAAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAAAFMAVABfADIANQA0AGIA
OQA5ADEANwBhAGUAOQBjADQAMgA0AGUAYQAwADMAYwBmADQAOQBhADgANwBjADQAYwA2AGEAZgAA
AD4ADwABAEYAaQBsAGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAuADAALgA4ADAANgAxAC4AMgAxADQA
NAAxAAAAAABwACgAAQBJAG4AdABlAHIAbgBhAGwATgBhAG0AZQAAAFMAVABfADIANQA0AGIAOQA5
ADEANwBhAGUAOQBjADQAMgA0AGUAYQAwADMAYwBmADQAOQBhADgANwBjADQAYwA2AGEAZgAuAGQA
bABsAAAAUAAWAAEATABlAGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0AAAAQwBvAHAAeQByAGkAZwBo
AHQAIABAACAATwBDAEMAQwAgADIAMAAyADIAAAAqAAEAAQBMAGUAZwBhAGwAVAByAGEAZABlAG0A
YQByAGsAcwAAAAAAAAAAAHgAKAABAE8AcgBpAGcAaQBuAGEAbABGAGkAbABlAG4AYQBtAGUAAABT
AFQAXwAyADUANABiADkAOQAxADcAYQBlADkAYwA0ADIANABlAGEAMAAzAGMAZgA0ADkAYQA4ADcA
YwA0AGMANgBhAGYALgBkAGwAbAAAAGgAJAABAFAAcgBvAGQAdQBjAHQATgBhAG0AZQAAAAAAUwBU
AF8AMgA1ADQAYgA5ADkAMQA3AGEAZQA5AGMANAAyADQAZQBhADAAMwBjAGYANAA5AGEAOAA3AGMA
NABjADYAYQBmAAAAQgAPAAEAUAByAG8AZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgA4
ADAANgAxAC4AMgAxADQANAAxAAAAAABGAA8AAQBBAHMAcwBlAG0AYgBsAHkAIABWAGUAcgBzAGkA
bwBuAAAAMQAuADAALgA4ADAANgAxAC4AMgAxADQANAAxAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAABgAAAMAAAA4DMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAA</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:PrecedenceConstraints>
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint]"
      DTS:CreationName=""
      DTS:DTSID="{64490D4C-D8E1-49C9-B303-61AEB5E85CF3}"
      DTS:From="Package\Foreach Loop Container 1"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint"
      DTS:To="Package\Unzip, Rename and stamp" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 1]"
      DTS:CreationName=""
      DTS:DTSID="{FAEE6E47-D7E3-484C-8BC2-F22907261D69}"
      DTS:From="Package\Delete Old Files Downloaded From SFTP Server"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 1"
      DTS:To="Package\Execute SQL Task 1" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 4]"
      DTS:CreationName=""
      DTS:DTSID="{69EF6496-50A5-4A50-A535-6DE10F193D42}"
      DTS:From="Package\Execute SQL Task 1"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 4"
      DTS:To="Package\Foreach Loop Container 1" />
  </DTS:PrecedenceConstraints>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="16" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="185.333333333334,44"
          Id="Package\Delete Old Files Downloaded From SFTP Server"
          TopLeft="419.154195607776,4.32719283158698" />
        <NodeLayout
          Size="178.666666666667,42"
          Id="Package\Execute SQL Task 1"
          TopLeft="440.710873112252,57.49303013128" />
        <NodeLayout
          Size="109.333333333334,44"
          Id="Package\Foreach Loop Container 1\Script Task"
          TopLeft="122.792452830189,6.05660377358493" />
        <NodeLayout
          Size="128,42"
          Id="Package\Foreach Loop Container 1\SFTP Task"
          TopLeft="41.0188679245284,69.2641509433962" />
        <NodeLayout
          Size="213.333333333334,42"
          Id="Package\Foreach Loop Container 1\Shared Folder File Transfer"
          TopLeft="197.547169811321,68.8490566037736" />
        <EdgeLayout
          Id="Package\Foreach Loop Container 1.PrecedenceConstraints[Constraint]"
          TopLeft="122.792452830189,28.0566037735849">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-17.7735849056606,41.2075471698113"
              Start="0,0"
              End="-17.7735849056606,33.7075471698113">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="-13.7735849056606,0" />
                  <mssgle:CubicBezierSegment
                    Point1="-13.7735849056606,0"
                    Point2="-17.7735849056606,0"
                    Point3="-17.7735849056606,4" />
                  <mssgle:LineSegment
                    End="-17.7735849056606,33.7075471698113" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-25.7735849056606,-22,16,16"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Foreach Loop Container 1.PrecedenceConstraints[Constraint 1]"
          TopLeft="231.792452830189,28.0566037735849">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="72.254716981132,40.7924528301887"
              Start="0,0"
              End="72.254716981132,33.2924528301887">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="68.254716981132,0" />
                  <mssgle:CubicBezierSegment
                    Point1="68.254716981132,0"
                    Point2="72.254716981132,0"
                    Point3="72.254716981132,4" />
                  <mssgle:LineSegment
                    End="72.254716981132,33.2924528301887" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="64.254716981132,-22,16,16"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="421.333333333334,246"
          Size="421.333333333334,289.333333333334"
          Id="Package\Foreach Loop Container 1"
          TopLeft="373.165746622384,136.222851302628" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 1]"
          TopLeft="419.154195607776,26.327192831587">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="21.556677504476,52.165837299693"
              Start="0,0"
              End="14.056677504476,52.165837299693">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="-18.5,0" />
                  <mssgle:CubicBezierSegment
                    Point1="-18.5,0"
                    Point2="-22.5,0"
                    Point3="-22.5,4" />
                  <mssgle:LineSegment
                    End="-22.5,48.165837299693" />
                  <mssgle:CubicBezierSegment
                    Point1="-22.5,48.165837299693"
                    Point2="-22.5,52.165837299693"
                    Point3="-18.5,52.165837299693" />
                  <mssgle:LineSegment
                    End="14.056677504476,52.165837299693" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 4]"
          TopLeft="530.210873112252,99.49303013128">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="53.454873510132,36.729821171348"
              Start="0,0"
              End="53.454873510132,29.229821171348">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,14.364910585674" />
                  <mssgle:CubicBezierSegment
                    Point1="0,14.364910585674"
                    Point2="0,18.364910585674"
                    Point3="4,18.364910585674" />
                  <mssgle:LineSegment
                    End="49.454873510132,18.364910585674" />
                  <mssgle:CubicBezierSegment
                    Point1="49.454873510132,18.364910585674"
                    Point2="53.454873510132,18.364910585674"
                    Point3="53.454873510132,22.364910585674" />
                  <mssgle:LineSegment
                    End="53.454873510132,29.229821171348" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <NodeLayout
          Size="205.333333333334,42.6666666666667"
          Id="Package\Unzip, Rename and stamp"
          TopLeft="480.624992838129,449.807024253592" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint]"
          TopLeft="583.562036396923,425.556184635961">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,24.2508396176312"
              Start="0,0"
              End="0,16.7508396176312">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,16.7508396176312" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>